##################################################
# test08
#

    #-----------------------------------------
    # text section
    #
    .text
    .align 4

    # entry point and pre-defined functions
    .global main
    .extern DIM
    .extern DOFS
    .extern ReadInt
    .extern WriteInt
    .extern WriteStr
    .extern WriteChar
    .extern WriteLn

    # scope test
test:
    # stack offsets:
    #    -60(%ebp)  48  [ $a        <array 10 of <int>> %ebp-60 ]
    #    -64(%ebp)   4  [ $i        <int> %ebp-64 ]
    #    -68(%ebp)   4  [ $t0       <ptr(4) to <array 10 of <int>>> %ebp-68 ]
    #    -72(%ebp)   4  [ $t1       <int> %ebp-72 ]
    #    -76(%ebp)   4  [ $t10      <int> %ebp-76 ]
    #    -80(%ebp)   4  [ $t11      <int> %ebp-80 ]
    #    -84(%ebp)   4  [ $t12      <int> %ebp-84 ]
    #    -88(%ebp)   4  [ $t13      <int> %ebp-88 ]
    #    -92(%ebp)   4  [ $t14      <ptr(4) to <array 10 of <int>>> %ebp-92 ]
    #    -96(%ebp)   4  [ $t15      <int> %ebp-96 ]
    #   -100(%ebp)   4  [ $t16      <ptr(4) to <array 10 of <int>>> %ebp-100 ]
    #   -104(%ebp)   4  [ $t17      <int> %ebp-104 ]
    #   -108(%ebp)   4  [ $t18      <int> %ebp-108 ]
    #   -112(%ebp)   4  [ $t19      <int> %ebp-112 ]
    #   -116(%ebp)   4  [ $t2       <ptr(4) to <array 10 of <int>>> %ebp-116 ]
    #   -120(%ebp)   4  [ $t20      <int> %ebp-120 ]
    #   -124(%ebp)   4  [ $t3       <int> %ebp-124 ]
    #   -128(%ebp)   4  [ $t4       <int> %ebp-128 ]
    #   -132(%ebp)   4  [ $t5       <int> %ebp-132 ]
    #   -136(%ebp)   4  [ $t6       <int> %ebp-136 ]
    #   -140(%ebp)   4  [ $t7       <ptr(4) to <array 10 of <int>>> %ebp-140 ]
    #   -144(%ebp)   4  [ $t8       <int> %ebp-144 ]
    #   -148(%ebp)   4  [ $t9       <ptr(4) to <array 10 of <int>>> %ebp-148 ]

    # prologue
    pushl   %ebp                   
    movl    %esp, %ebp             
    pushl   %ebx                    # save callee saved registers
    pushl   %esi                   
    pushl   %edi                   
    subl    $136, %esp              # make room for locals

    cld                             # memset local stack area to 0
    xorl    %eax, %eax             
    movl    $34, %ecx              
    mov     %esp, %edi             
    rep     stosl                  
    movl    $1,-60(%ebp)            # local array 'a': 1 dimensions
    movl    $10,-56(%ebp)           #   dimension 1: 10 elements

    # function body
    movl    -60(%ebp), %eax         #   0:     param  0 <- a
    pushl   %eax                   
    movl    $1, %eax                #   1:     assign i <- 1
    movl    %eax, -64(%ebp)        
l_test_3_while_cond:
    movl    -64(%ebp), %eax         #   3:     if     i < 10 goto 4_while_body
    movl    $10, %ebx              
    cmpl    %ebx, %eax             
    jl      l_test_4_while_body    
    jmp     l_test_2                #   4:     goto   2
l_test_4_while_body:
    movl    -60(%ebp), %eax         #   6:     param  0 <- a
    pushl   %eax                   
    movl    -64(%ebp), %eax         #   7:     assign i <- i
    movl    %eax, -64(%ebp)        
    jmp     l_test_3_while_cond     #   8:     goto   3_while_cond
l_test_2:
    movl    $0, %eax                #  10:     assign i <- 0
    movl    %eax, -64(%ebp)        
l_test_10_while_cond:
    movl    -64(%ebp), %eax         #  12:     if     i < 10 goto 11_while_body
    movl    $10, %ebx              
    cmpl    %ebx, %eax             
    jl      l_test_11_while_body   
    jmp     l_test_9                #  13:     goto   9
l_test_11_while_body:
    movl    -60(%ebp), %eax         #  15:     param  0 <- a
    pushl   %eax                   
    movl    -60(%ebp), %eax         #  16:     param  0 <- a
    pushl   %eax                   
    call    WriteInt                #  17:     call   WriteInt
    addl    $4, %esp               
    movl    -64(%ebp), %eax         #  18:     assign i <- i
    movl    %eax, -64(%ebp)        
    jmp     l_test_10_while_cond    #  19:     goto   10_while_cond
l_test_9:

l_test_exit:
    # epilogue
    addl    $136, %esp              # remove locals
    popl    %edi                   
    popl    %esi                   
    popl    %ebx                   
    popl    %ebp                   
    ret                            

    # scope test08
main:
    # stack offsets:

    # prologue
    pushl   %ebp                   
    movl    %esp, %ebp             
    pushl   %ebx                    # save callee saved registers
    pushl   %esi                   
    pushl   %edi                   
    subl    $0, %esp                # make room for locals

    # function body
    call    test                    #   0:     call   test

l_test08_exit:
    # epilogue
    addl    $0, %esp                # remove locals
    popl    %edi                   
    popl    %esi                   
    popl    %ebx                   
    popl    %ebp                   
    ret                            

    # end of text section
    #-----------------------------------------

    #-----------------------------------------
    # global data section
    #
    .data
    .align 4



    # end of global data section
    #-----------------------------------------

    .end
##################################################
