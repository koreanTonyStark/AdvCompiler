/*
 * cfg.cpp
 *
 *      Author: team4
 */

#include <cassert>
#include <algorithm>

#include "cfg.h"

using node_const_iterator = list<shared_ptr<CfgNode>>::const_iterator;

CfgNode::CfgNode(CfgProc *owner, CTacInstr *instr) {
	assert(owner != NULL);
	assert(instr != NULL);
	if (!owner || !instr)
		return;
	_nodeOwner = owner;
	_nodeId = owner->GetNodeCnt();
	_instr = instr;
	LiveInfo();
}

CfgNode::CfgNode(const CfgNode &node) {
	// general info:
	_nodeOwner = node._nodeOwner;
	_nodeId = node._nodeId;
	_instr = node._instr;
	LiveInfo();
}

CfgNode::~CfgNode(void) {

}

const CfgProc* CfgNode::GetOwner(void) const {
	return _nodeOwner;
}

const size_t CfgNode::GetId(void) const {
	return _nodeId;
}

const CTacInstr* CfgNode::GetInstr(void) const {
	return _instr;
}

const list<shared_ptr<CfgNode>> &CfgNode::GetSuccs(void) const {
	return _succs;
}

const list<shared_ptr<CfgNode>> &CfgNode::GetPreds(void) const {
	return _preds;
}

void CfgNode::GetAdj(list<shared_ptr<CfgNode>> &adj) const {
	adj.insert(adj.begin(), _succs.begin(), _succs.end());
	adj.insert(adj.end(), _preds.begin(), _preds.end());
}

const size_t CfgNode::InDegree(void) const {
	return _preds.size();
}

const size_t CfgNode::OutDegree(void) const {
	return _succs.size();
}

const size_t CfgNode::Degree(void) const {
	return InDegree() + OutDegree();
}

bool CfgNode::GoesTo(const shared_ptr<CfgNode> &n) const {
	if (find(_succs.begin(), _succs.end(), n) != _succs.end())
		return true;
	return false;
}

bool CfgNode::ComesFrom(const shared_ptr<CfgNode> &n) const {
	if (find(_preds.begin(), _preds.end(), n) != _preds.end())
		return true;
	return false;
}

bool CfgNode::IsAdj(const shared_ptr<CfgNode> &n) const {
	if (GoesTo(n) || ComesFrom(n))
		return true;
	return false;
}

void CfgNode::AddSucc(const shared_ptr<CfgNode> &n) {
	if (!GoesTo(n))
		_succs.push_back(n);
}

void CfgNode::AddPred(const shared_ptr<CfgNode> &n) {
	if (!ComesFrom(n))
		_preds.push_back(n);
}

void CfgNode::RmSucc(const shared_ptr<CfgNode> &n) {
	if (GoesTo(n))
		_succs.remove(n);
}

void CfgNode::RmPred(const shared_ptr<CfgNode> &n) {
	if (ComesFrom(n))
		_preds.remove(n);
}

const list<CTacAddr*> &CfgNode::GetUse(void) const {
	return _use;
}

const CTacAddr* CfgNode::GetDef(void) const {
	return _def;
}

const list<CTacAddr*> &CfgNode::GetLiveIn(void) const {
	return _liveIn;
}
const list<CTacAddr*> &CfgNode::GetLiveOut(void) const {
	return _liveOut;
}

bool CfgNode::IsLiveIn(const CTacAddr* var) const {
	if (find(_use.begin(), _use.end(), var) != _use.end()) {
		return true;
	}
	if (IsLiveOut(var)) {
		if (var == _def) {
			return false;
		}
		return true;
	}
	return false;
}

bool CfgNode::IsLiveOut(const CTacAddr* var) const {
	node_const_iterator it = _succs.cbegin();
	while (it != _succs.cend()) {
		const shared_ptr<CfgNode> &n = *it++;
		if (n->IsLiveIn(var))
			return true;
	}
	return false;
}

void CfgNode::AddLiveIn(const list<CTacAddr*> &vars) {
	list<CTacAddr*>::const_iterator it = vars.cbegin();
	while (it != vars.cend()) {
		CTacAddr *var = *it++;
		if (!(find(_liveIn.begin(), _liveIn.end(), var) != _liveOut.end()))
			_liveIn.push_back(var);
	}
}

void CfgNode::AddLiveOut(const list<CTacAddr*> &vars) {
	list<CTacAddr*>::const_iterator it = vars.cbegin();
	while (it != vars.cend()) {
		CTacAddr *var = *it++;
		if (!(find(_liveOut.begin(), _liveOut.end(), var) != _liveOut.end()))
			_liveOut.push_back(var);
	}
}

void CfgNode::CopyLiveIn(const list<CTacAddr*> &vars) {
	_liveIn = vars; // note: overwrites list content
}

void CfgNode::CopyLiveOut(const list<CTacAddr*> &vars) {
	_liveOut = vars; // note: overwrites list content
}

void CfgNode::LiveInfo(void) {
	unsigned int numSrc = _instr->GetNumSrc();
	switch (numSrc) {
	case 2: {
		_use.push_back(_instr->GetSrc(1));
		_use.push_back(_instr->GetSrc(2));
		break;
	}
	case 1:
		_use.push_back(_instr->GetSrc(1));
	}

	_def = dynamic_cast<CTacAddr*>(_instr->GetDest());

	EOperation op = _instr->GetOperation();
	switch (op) {
	case opParam:
		_def = nullptr;
		break; // we don't need parameter in _use
	case opGoto: {
		if (!IsRelOp(op))
			_def = nullptr; // we don't need jump label in _use
		break;
	}
	case opCall:
		_use.clear(); // TODO: do we need func name in _use?
	}
	// TODO: how to handle opAddress, opDeref, opCast?
	// TODO: special treatment of opAssign in liveness analysis (textbook)
}

CfgProc::CfgProc(CCodeBlock *cb, size_t offset) {
	assert(cb != NULL);
	if (!cb)
		return;
	_cb = cb;
	_procName = cb->GetName();
	_offset = offset;
	MakeNodes();
	MakeEdges();
	Liveness();
}

CfgProc::CfgProc(const CfgProc &proc) {
	_cb = proc._cb;
	_procName = proc._procName;
	_offset = proc._offset;

	// note: below list data is shared with object copy
	// _nodes = proc._nodes;
	// TODO: check if correct
	node_const_iterator it = _nodes.cbegin();
	while (it != _nodes.cend()) {
		const shared_ptr<CfgNode> &node = *it++;
		shared_ptr<CfgNode> newNode(new CfgNode(*node));
		_nodes.push_back(newNode);
	}
}

CfgProc::~CfgProc(void) {

}

const string &CfgProc::GetName(void) const {
	return _procName;
}

const list<shared_ptr<CfgNode>> &CfgProc::GetNodes(void) const {
	return _nodes;
}

const size_t CfgProc::GetNodeCnt(void) const {
	return _nodes.size();
}

const size_t CfgProc::GetOffset(void) const {
	return _offset;
}

const shared_ptr<CfgNode> CfgProc::FindNode(const CTacInstr *instr) const {
	node_const_iterator it = _nodes.cbegin();
	while (it != _nodes.cend()) {
		const shared_ptr<CfgNode> &n = *it++;
		if (n->GetInstr() == instr)
			return n;
	}
	return nullptr;
}

void CfgProc::AddEdge(const shared_ptr<CfgNode> &from,
		const shared_ptr<CfgNode> &to) {
	to->AddPred(from);
	from->AddSucc(to);
}

void CfgProc::RmEdge(const shared_ptr<CfgNode> &from,
		const shared_ptr<CfgNode> &to) {
	to->RmPred(from);
	from->RmSucc(to);
}

void CfgProc::DelNode(const shared_ptr<CfgNode> &n) {
	if (n->GetOwner() == this) {
		if (n->InDegree() == 1 && n->OutDegree() == 1) {
			const list<shared_ptr<CfgNode>> &preds = n->GetPreds();
			const shared_ptr<CfgNode> &from = preds.front();
			const list<shared_ptr<CfgNode>> &succs = n->GetSuccs();
			const shared_ptr<CfgNode> &to = succs.front();
			RmEdge(from, n);
			RmEdge(n, to);
			_nodes.remove(n);
			AddEdge(from, to);
		}
	}
}

void CfgProc::toDot(ostream &out) const { // TODO: make it prettier
	out << "// scope '" << _procName << "'" << endl;
	node_const_iterator it = _nodes.cbegin();
	while (it != _nodes.cend()) {
		const shared_ptr<CfgNode> &n = *it++;

		// offset id for interproc cfg
		size_t id = n->GetId() + _offset;

		const CTacInstr *instr = n->GetInstr();
		out << "node" << id << " [label=\"";
		if (n == _nodes.front()) {
			out << " ENTER " << _procName << "\\r ";
		} else if (n == _nodes.back()) {
			out << " EXIT " << _procName << "\\r ";
		}
		out << instr << "\\l\",shape=box];" << endl;

		const size_t degree = n->OutDegree();
		if (degree > 0) {
			const list<shared_ptr<CfgNode>> &succs = n->GetSuccs();
			node_const_iterator nit = succs.cbegin();
			while (nit != succs.cend()) {
				const shared_ptr<CfgNode> &next = *nit++;
				// offset next id for interproc cfg
				size_t nid = next->GetId() + next->GetOwner()->GetOffset();
				out << "node" << id << " -> " << "node" << nid << ";" << endl;
			}
		}
	}
}

void CfgProc::MakeNodes(void) {
	const list<CTacInstr*> &ops = _cb->GetInstr();
	list<CTacInstr*>::const_iterator it = ops.cbegin();
	while (it != ops.cend()) {
		CTacInstr *instr = *it++;
		shared_ptr<CfgNode> n(new CfgNode(this, instr));
		_nodes.push_back(n);
	}
}

void CfgProc::MakeEdges(void) {
	node_const_iterator it = _nodes.cbegin();
	while (it != _nodes.cend()) {
		const shared_ptr<CfgNode> &n = *it++;
		if (it != _nodes.cend()) {
			// get next node (fall through case)
			const shared_ptr<CfgNode> &next = *it;
			const CTacInstr *instr = n->GetInstr();
			// get dest instr (jump case)
			const CTacInstr *dest =
					dynamic_cast<const CTacInstr*>(instr->GetDest());
			if (!dest) {
				AddEdge(n, next);	// fall through
				continue;
			}
			// get dest node (jump case)
			const shared_ptr<CfgNode> target = FindNode(dest);
			if (!target) {
				cout << "Node not found at instr_id : " << dest->GetId()
						<< endl;
				continue;
			}
			// "if true goto" or just "goto"
			AddEdge(n, target); 	// jump
			// "if false goto"
			if (IsRelOp(instr->GetOperation())) {
				AddEdge(n, next);	// fall through
			}
		}
	}
}

void CfgProc::Liveness(void) {
	// backward analysis
	list<shared_ptr<CfgNode>>::reverse_iterator rit = _nodes.rbegin();
	shared_ptr<CfgNode> node = *rit;  //TODO: ???

	// first iteration
	while (rit != _nodes.rend()) {
		node = *rit++;
		node->AddLiveIn(node->GetUse());
	}

	// repeat until reaching fixed-point
	CfgProc *copy_proc = new CfgProc(*this); //TODO: PROBLEM HERE!!!
	const list<shared_ptr<CfgNode>> &copy_nodes = copy_proc->GetNodes();
	list<shared_ptr<CfgNode>>::const_reverse_iterator copy_rit =
			copy_nodes.rbegin();
	shared_ptr<CfgNode> copy_node = *copy_rit; //TODO: ???

	while (node->GetLiveIn() != copy_node->GetLiveIn()
			&& node->GetLiveOut() != copy_node->GetLiveOut()) {
		copy_rit = _nodes.rbegin();
		rit = _nodes.rbegin();
		while (copy_rit != copy_nodes.rend() && rit != _nodes.rend()) {
			node = *rit++;
			copy_node = *copy_rit++;
			// save
			copy_node->CopyLiveIn(node->GetLiveIn());
			copy_node->CopyLiveOut(node->GetLiveOut());
			// step
			const list<shared_ptr<CfgNode>> &succs = node->GetSuccs();
			node_const_iterator succ_it = succs.cbegin();
			while (succ_it != succs.cend()) {
				const shared_ptr<CfgNode> &succ_node = *succ_it++;
				node->AddLiveOut(succ_node->GetLiveIn());
			}
			// node->AddLiveIn(node->GetUse());
			list<CTacAddr*> in;
			const list<CTacAddr*> &out = node->GetLiveOut();
			list<CTacAddr*>::const_iterator out_it = out.cbegin();
			while (out_it != out.cend()) {
				CTacAddr *var = *out_it++;
				if (var != node->GetDef())
					in.push_back(var);
			}
			node->AddLiveIn(in);
		}
	}
	delete copy_proc;
}

CfgIntraProc::CfgIntraProc(CModule *m) {
	assert(m != NULL);
	if (!m)
		return;
	_m = m;
	_modName = m->GetName();
	// initial proc cfg offset
	size_t offset = 0;
	CCodeBlock *cb = _m->GetCodeBlock();
	// increment offset for next proc cfg
	offset += MakeProcs(cb, offset);
	const vector<CScope*> &proc = _m->GetSubscopes();
	for (size_t p = 0; p < proc.size(); p++) {
		cb = proc[p]->GetCodeBlock();
		// increment offset for next proc cfg
		offset += MakeProcs(cb, offset);
	}
}

CfgIntraProc::~CfgIntraProc(void) {

}

CModule* CfgIntraProc::GetCModule() const
{
	return _m;
}

const string &CfgIntraProc::GetName(void) const {
	return _modName;
}

const vector<shared_ptr<CfgProc>> &CfgIntraProc::GetProcs(void) const {
	return _procs;
}

const shared_ptr<CfgProc> CfgIntraProc::FindProc(const string &name) const {
	for (size_t p = 0; p < _procs.size(); p++) {
		if (_procs[p]->GetName() == name)
			return _procs[p];
	}
	return nullptr;
}

void CfgIntraProc::toDot(ostream &out) const {
	for (size_t p = 0; p < _procs.size(); p++) {
		_procs[p]->toDot(out);
	}
}

size_t CfgIntraProc::MakeProcs(CCodeBlock *cb, size_t offset) {
	shared_ptr<CfgProc> proc(new CfgProc(cb, offset));
	_procs.push_back(proc);
	return proc->GetNodeCnt();
}

CfgInterProc::CfgInterProc(CModule *m) :
		CfgIntraProc(m) {
	assert(m != NULL);
	if (!m)
		return;
	MakeGraph();
}

CfgInterProc::~CfgInterProc(void) {

}

void CfgInterProc::MakeGraph() {
	for (size_t p = 0; p < _procs.size(); p++) {
		const list<shared_ptr<CfgNode>> &nodes = _procs[p]->GetNodes();
		node_const_iterator it = nodes.cbegin();
		while (it != nodes.cend()) {
			const shared_ptr<CfgNode> &node = *it++;
			const CTacInstr *instr = node->GetInstr();
			EOperation op = instr->GetOperation();
			// make edges between procs for func calls
			if (op == opCall) {
				const CTacName *func =
						dynamic_cast<const CTacName*>(instr->GetSrc(1));
				if (!func) {
					cout << "Called function not found at instr_id : "
							<< instr->GetId() << endl;
					continue;
				}
				const string &name = func->GetSymbol()->GetName();
				const shared_ptr<CfgProc> &dest = FindProc(name);
				if (!dest) {
					list<string> io_funcs = { "WriteInt", "WriteStr",
							"WriteChar", "WriteLn", "ReadInt" };
					if (!(find(io_funcs.begin(), io_funcs.end(), name)
							!= io_funcs.end())) {
						cout << "Function [" << name << "] not found in : "
								<< _modName << ".mod" << endl;
					}
					continue;
				}
				const list<shared_ptr<CfgNode>> &target = dest->GetNodes();
				if (target.empty()) {
					cout << "Function [" << name << "] nodes not found" << endl;
					continue;
				}
				// edge from func call to func
				_procs[p]->AddEdge(node, target.front());
				// edge from func return to func call
				dest->AddEdge(target.back(), node);
			}
		}
	}
}
