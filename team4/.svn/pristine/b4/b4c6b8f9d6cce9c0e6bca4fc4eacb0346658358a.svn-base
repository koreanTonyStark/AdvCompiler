/* Constant-Propagation based on CFG
 * Author : team4 
 * Key Concept : changing .mod (with constant propagation)
 * Basic : skip array first (in implementation)
 */ 

//constant propagation 
//common-subexpression elimination 

#include <vector>
#include <memory>
#include <cassert>
#include <iostream>



#include "constant_propagation.h"

using namespace std;

using citCfgNode = list<shared_ptr<CfgNode>>::const_iterator;
using itCfgNode = list<shared_ptr<CfgNode>>::iterator;
using itCfgProc = vector<shared_ptr<CfgProc>>::iterator;




C_Propagation::C_Propagation(CfgInterProc *cfg)
{
	_cfg = cfg;
	_num_of_int  = 0;
	_num_of_bool = 0;
	_num_of_char = 0;
	_m = cfg->GetCModule(); 
	_symtab = _m->GetSymbolTable();	
	_procs = cfg->GetProcs();
	for(int i=0; i<_procs.size();++i)
		_num_of_code_lines+=_procs[i]->GetNodeCnt();
	cntNumOfVariables();
	//do constant propagation first 
	//second erase the code line by dead-code elimination
	doDeadCodeElimination();
	doConstantPropagation();
	

	
}

void C_Propagation::doDeadCodeElimination(void)
{
	//store list of instructions which is definition 
	//we can check a<-b if a is in LiveOut on that list 
	//if not, then erase, if is then live 
	// no use but keep for urgency: list<shared_ptr<CfgNode>> def_list;
	itCfgProc proc_it = _procs.begin();
	for(;proc_it<_procs.end();++proc_it)
	{
		const list<shared_ptr<CfgNode>>& nodeList_perProc = (*proc_it)->GetNodes();
		citCfgNode cit = nodeList_perProc.cbegin();
		while(cit!= nodeList_perProc.cend())
		{
			shared_ptr<CfgNode> node = (*cit);
			//cout<<node->GetId()<<" ";
			//only check has assignment to some variable 
			if((*cit)->GetDef()!=nullptr)
			{
				//cout<<"def is not null :";
				CTacAddr *var = const_cast<CTacAddr*>(node->GetDef());
				CfgNode::LIVE &live = node->GetLiveInfo();
				//cout<<var<<endl;
				//dead-code found
				if(live._liveOut.find(var) == live._liveOut.end())
				{
					//first : erase CTacInstr* in that proc 
					cout<<"dead-code found on line number"<< node->GetId()<<endl;
					CTacInstr* target = const_cast<CTacInstr*>(node->GetInstr());
					size_t target_id = target->GetId();
					//don't touch the structure of InterCfgProc 
					//just access to CModule directly, after erasing then, data structure of InterCfgProc 
					//will be changed too, cz it's connected with pointers 
					//code_block for each prodecure(include main function)
					//(*proc_it)->DelNode(node);//not works properly 
					//cout<<target_id<<endl;
					CCodeBlock* cb = (*proc_it)->GetCCodeBlock();
					//erasing it from CCodeBlock 
					//implemented on CCodeBlock class in ir.h and ir.cpp 
					cb->DelInstr(target_id);
					/*erase that list 
					list<CTacInstr*> inst_list = cb->GetInstr();
					list<CTacInstr*>::const_iterator fuck = inst_list.begin();
					 while(fuck!=inst_list.end())
					{
						cout<<(*fuck)<<endl;
						fuck++;
					}
					*/
					//second : erase it from Symbol Table 
					//issue : if one variable def in 1, that is used in 2, and dead in 3
					//do we need to erase it from symbol table? 
					//thing to check : can be executed if d exists in symtab, but no exist in code line 
					//how to convert .s -> to binary file 
				}
			}
			cit++;
		}

	}


	//issue : can we modify .tac file's data-structure? 
}

int C_Propagation::returnInstanceTypeForCTacAddr(CTacAddr *addr)
{
	enum Type{
		NAME=0,
		CONSTANT,
		LABEL,
	};

	if(CTacName* v =dynamic_cast<CTacName*>(addr))
			return NAME;
	else if(CTacConst* v =dynamic_cast<CTacConst*>(addr))
		return CONSTANT;
	else
		return LABEL;
}


void C_Propagation::doConstantPropagation(void)
{
	//reaching definition -> in, out stores code line number 
	//simple algorithm -> very intuitive 
	/* if we have assignee in any node,
	(which means assignment block and we have to modfiy variable to constant)
	   we check that assignee's variable name and check whether there exists 
	   only 1 code_line(definition of assignee) for that assignee
	   then we can change it to constant through that line's constant 
	 */

	itCfgProc proc_it = _procs.begin();
	for(;proc_it<_procs.end();++proc_it)
	{
		const list<shared_ptr<CfgNode>>& nodeList_perProc = (*proc_it)->GetNodes();
		citCfgNode cit = nodeList_perProc.cbegin();
		while(cit!= nodeList_perProc.cend())
		{
			shared_ptr<CfgNode> node = (*cit);
			//cout<<node->GetId()<<" ";
			//only check has assignment to some variable 
			if(!(*cit)->GetUse().empty())
			{
				CTacInstr *target_inst= const_cast<CTacInstr*>(node->GetInstr());
				EOperation target_operation = target_inst->GetOperation();
				bool ReachableFromOnlyOne=false;

				//binary operation 
				if(target_operation<=5)
				{
					//switch(target_operation)
					CTacAddr *src1 = target_inst->GetSrc(1);
					CTacAddr *src2 = target_inst->GetSrc(2);
					cout<<"code line num : "<<target_inst->GetId();

					if(returnInstanceTypeForCTacAddr(src1)==0)
					{
						CfgNode::REACH &reach = node->GetReachInfo();
						set<shared_ptr<CfgNode>>::iterator it = reach._liveIn.begin();
						int cnt=0;
						size_t line_number;
						while(it!=reach._liveIn.end())
						{
							//always possible because we know instance type is CTacName 
							CTacName *tmp_src1= dynamic_cast<CTacName*>(src1);
							CSymbol *symbol_src1=const_cast<CSymbol*>(tmp_src1->GetSymbol()); 
							string symbol_name = symbol_src1->GetName();

							CTacInstr *comp_inst= const_cast<CTacInstr*>((*it)->GetInstr());
							CTacName *comp_src1=dynamic_cast<CTacName*>(comp_inst->GetDest());
							CSymbol *symbol_comp=const_cast<CSymbol*>(comp_src1->GetSymbol());
							string symbol_name_comp = symbol_comp->GetName();
							//c++ provides string class == operator overloading
							if(symbol_name==symbol_name_comp)
							{
								//have to store many thing
								line_number=comp_inst->GetId();
								cnt++;
							}
							it++;
						}
						//cout<<" line number : "<<line_number;
						//cout<<" cnt: "<<cnt<<" ";
						//constant propagation 
						if(cnt==1)
						{
							size_t my_id = target_inst->GetId();
							CCodeBlock* cb = (*proc_it)->GetCCodeBlock();
							cb->setInstr(my_id ,line_number,1);
						}

						//if(reach._liveIn.find(`1) == live._liveOut.end())
							
					}
					
					if(returnInstanceTypeForCTacAddr(src2)==0)
					{
						CfgNode::REACH &reach = node->GetReachInfo();
						set<shared_ptr<CfgNode>>::iterator it = reach._liveIn.begin();
						int cnt=0;
						size_t line_number;
						while(it!=reach._liveIn.end())
						{
							//always possible because we know instance type is CTacName 
							CTacName *tmp_src2= dynamic_cast<CTacName*>(src2);
							CSymbol *symbol_src2=const_cast<CSymbol*>(tmp_src2->GetSymbol()); 
							string symbol_name = symbol_src2->GetName();

							CTacInstr *comp_inst= const_cast<CTacInstr*>((*it)->GetInstr());
							CTacName *comp_src2=dynamic_cast<CTacName*>(comp_inst->GetDest());
							CSymbol *symbol_comp=const_cast<CSymbol*>(comp_src2->GetSymbol());
							string symbol_name_comp = symbol_comp->GetName();
							//c++ provides string class == operator overloading
							if(symbol_name==symbol_name_comp)
							{
								//have to store many thing
								line_number=comp_inst->GetId();
								cnt++;
							}
							it++;
						}
						//cout<<" line number : "<<line_number;
						//cout<<" cnt: "<<cnt<<" ";
						//constant propagation 
						if(cnt==1)
						{
							size_t my_id = target_inst->GetId();
							CCodeBlock* cb = (*proc_it)->GetCCodeBlock();
							cb->setInstr(my_id ,line_number,2);
						}

						//if(reach._liveIn.find(`1) == live._liveOut.end())
							
					}


					//# of src=2

				}
				//unary operation 
				else if(target_operation<=8)
				{
					//# of src=1

					CTacAddr *src1 = target_inst->GetSrc(1);
					cout<<"code line num : "<<target_inst->GetId()<<endl;
					if(returnInstanceTypeForCTacAddr(src1)==0)
					{
						
					}
					
				}
				//assignment operation 
				else
				{
					CTacAddr *src1 = target_inst->GetSrc(1);

					//# of src=1
					cout<<"code line num : "<<target_inst->GetId()<<endl;
					if(returnInstanceTypeForCTacAddr(src1)==0)
					{
						
					}
					
				}

				
				//target_inst->GetSrc();


				// temp code block until cb->DelInstr
				// //cout<<"def is not null :";
				// CTacAddr *var = const_cast<CTacAddr*>(node->GetDef());
				// //REACH
				// CfgNode::LIVE &live = node->GetLiveInfo();
				// //cout<<var<<endl;
				// //dead-code found
				// if(live._liveOut.find(var) == live._liveOut.end())
				// {
				// 	//first : erase CTacInstr* in that proc 
				// 	cout<<"dead-code found on line number"<< node->GetId()<<endl;
				// 	CTacInstr* target = const_cast<CTacInstr*>(node->GetInstr());
				// 	size_t target_id = target->GetId();
				// 	CCodeBlock* cb = (*proc_it)->GetCCodeBlock();
				// 	cb->DelInstr(target_id);
				// }
			}
			cit++;
		}

	}



}

C_Propagation::~C_Propagation()
{
	
	
}


void C_Propagation::showNumOfPrimitive(void) const
{
	cout<<"number of INT  variable : "<<_num_of_int<<endl;
	cout<<"number of BOOL variable : "<<_num_of_bool<<endl;
	cout<<"number of CHAR variable : "<<_num_of_char<<endl;
}

CfgInterProc* C_Propagation::getCFG(void) const
{
	return _cfg;
}

const CSymtab* C_Propagation::getCSymtab(void) const
{
	return _symtab;
}

size_t C_Propagation::getNumOfInt(void) const
{
	return _num_of_int;
} 

size_t C_Propagation::getNumOfBool(void) const
{
	return _num_of_bool;
} 
size_t C_Propagation::getNumOfChar(void) const
{
	return _num_of_char;
} 
size_t C_Propagation::getNumOfCodeBlocks(void) const
{
	return _num_of_code_lines;
}

void C_Propagation::cntNumOfVariables(void)
{
	const vector<CSymbol*> &list = _symtab->GetSymbols();
	for(int i=0; i<list.size(); ++i)
	{
		
		const CType* type = list[i]->GetDataType();
		if(type->IsBoolean())
			_num_of_bool++;
		else if(type->IsChar())
			_num_of_char++;
		else if(type->IsInt())
			_num_of_int++;

		//cout<<"name: "<<list[i]->GetName()<<" ";
		//cout<<"symbol type: "<<list[i]->GetSymbolType()<<" ";
		//cout<<list[i]->GetDataType()<<" ";
		//cout<<"data : ";
		//if(list[i]->GetData()!=nullptr)
		//	cout<<"data type: "<<list[i]->GetData();
		//cout<<"base register: "<<list[i]->GetBaseRegister()<<" ";
		//cout<<"offset: "<<list[i]->GetOffset()<<endl;

	}
}





