##################################################
# gcd
#

    #-----------------------------------------
    # text section
    #
    .text
    .align 4

    # entry point and pre-defined functions
    .global main
    .extern DIM
    .extern DOFS
    .extern ReadInt
    .extern WriteInt
    .extern WriteStr
    .extern WriteChar
    .extern WriteLn

    # scope gcd_iter
gcd_iter:
    # stack offsets:
    #      8(%ebp)   4  [ %a        <ptr(4) to <array 2 of <int>>> %ebp+8 ]
    #    -16(%ebp)   4  [ $t11      <int> %ebp-16 ]
    #    -20(%ebp)   4  [ $t12      <int> %ebp-20 ]
    #    -24(%ebp)   4  [ $t13      <int> %ebp-24 ]
    #    -28(%ebp)   4  [ $t14      <int> %ebp-28 ]
    #    -32(%ebp)   4  [ $t15      <int> %ebp-32 ]
    #    -36(%ebp)   4  [ $t16      <int> %ebp-36 ]
    #    -40(%ebp)   4  [ $t17      <int> %ebp-40 ]
    #    -44(%ebp)   4  [ $t18      <int> %ebp-44 ]
    #    -48(%ebp)   4  [ $t19      <int> %ebp-48 ]
    #    -52(%ebp)   4  [ $t20      <int> %ebp-52 ]
    #    -56(%ebp)   4  [ $t21      <int> %ebp-56 ]
    #    -60(%ebp)   4  [ $t22      <int> %ebp-60 ]
    #    -64(%ebp)   4  [ $t23      <int> %ebp-64 ]
    #    -68(%ebp)   4  [ $t24      <int> %ebp-68 ]
    #    -72(%ebp)   4  [ $t25      <int> %ebp-72 ]
    #    -76(%ebp)   4  [ $t26      <int> %ebp-76 ]
    #    -80(%ebp)   4  [ $t27      <int> %ebp-80 ]
    #    -84(%ebp)   4  [ $t28      <int> %ebp-84 ]
    #    -88(%ebp)   4  [ $t29      <int> %ebp-88 ]
    #    -92(%ebp)   4  [ $t30      <int> %ebp-92 ]
    #    -96(%ebp)   4  [ $t31      <int> %ebp-96 ]
    #   -100(%ebp)   4  [ $t32      <int> %ebp-100 ]
    #   -104(%ebp)   4  [ $t33      <int> %ebp-104 ]
    #   -108(%ebp)   4  [ $t34      <int> %ebp-108 ]
    #   -112(%ebp)   4  [ $t35      <int> %ebp-112 ]
    #   -116(%ebp)   4  [ $t36      <int> %ebp-116 ]
    #   -120(%ebp)   4  [ $t37      <int> %ebp-120 ]
    #   -124(%ebp)   4  [ $t38      <int> %ebp-124 ]
    #   -128(%ebp)   4  [ $t39      <int> %ebp-128 ]
    #   -132(%ebp)   4  [ $t40      <int> %ebp-132 ]
    #   -136(%ebp)   4  [ $t41      <int> %ebp-136 ]
    #   -140(%ebp)   4  [ $t42      <int> %ebp-140 ]
    #   -144(%ebp)   4  [ $t43      <int> %ebp-144 ]
    #   -148(%ebp)   4  [ $t44      <int> %ebp-148 ]
    #   -152(%ebp)   4  [ $t45      <int> %ebp-152 ]
    #   -156(%ebp)   4  [ $t46      <int> %ebp-156 ]
    #   -160(%ebp)   4  [ $t47      <int> %ebp-160 ]
    #   -164(%ebp)   4  [ $t48      <int> %ebp-164 ]
    #   -168(%ebp)   4  [ $t49      <int> %ebp-168 ]
    #   -172(%ebp)   4  [ $t50      <int> %ebp-172 ]
    #   -176(%ebp)   4  [ $t51      <int> %ebp-176 ]
    #   -180(%ebp)   4  [ $t52      <int> %ebp-180 ]
    #   -184(%ebp)   4  [ $t53      <int> %ebp-184 ]
    #   -188(%ebp)   4  [ $t54      <int> %ebp-188 ]
    #   -192(%ebp)   4  [ $t55      <int> %ebp-192 ]
    #   -196(%ebp)   4  [ $t56      <int> %ebp-196 ]

    # prologue
    pushl   %ebp                   
    movl    %esp, %ebp             
    pushl   %ebx                    # save callee saved registers
    pushl   %esi                   
    pushl   %edi                   
    subl    $184, %esp              # make room for locals

    cld                             # memset local stack area to 0
    xorl    %eax, %eax             
    movl    $46, %ecx              
    mov     %esp, %edi             
    rep     stosl                  

    # function body
l_gcd_iter_1_while_cond:
    movl    8(%ebp), %eax           #   1:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   2:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   3:     add    t18 <- a, 4
    movl    $4, %ebx               
    addl    %ebx, %eax             
    movl    %eax, -44(%ebp)        
    movl    8(%ebp), %eax           #   4:     if     a # @a goto 2_while_body
    movl    -44(%ebp), %edi        
    movl    (%edi), %ebx           
    cmpl    %ebx, %eax             
    jne     l_gcd_iter_2_while_body
    jmp     l_gcd_iter_0            #   5:     goto   0
l_gcd_iter_2_while_body:
    movl    8(%ebp), %eax           #   7:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   8:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   9:     add    t26 <- a, 4
    movl    $4, %ebx               
    addl    %ebx, %eax             
    movl    %eax, -76(%ebp)        
    movl    8(%ebp), %eax           #  10:     if     a > @a goto 5_if_true
    movl    -76(%ebp), %edi        
    movl    (%edi), %ebx           
    cmpl    %ebx, %eax             
    jg      l_gcd_iter_5_if_true   
    jmp     l_gcd_iter_6_if_false   #  11:     goto   6_if_false
l_gcd_iter_5_if_true:
    movl    8(%ebp), %eax           #  13:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  14:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  15:     param  0 <- a
    pushl   %eax                   
    jmp     l_gcd_iter_4            #  16:     goto   4
l_gcd_iter_6_if_false:
    movl    8(%ebp), %eax           #  18:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  19:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  20:     param  0 <- a
    pushl   %eax                   
l_gcd_iter_4:
    jmp     l_gcd_iter_1_while_cond #  22:     goto   1_while_cond
l_gcd_iter_0:
    movl    8(%ebp), %eax           #  24:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  25:     return a
    jmp     l_gcd_iter_exit        

l_gcd_iter_exit:
    # epilogue
    addl    $184, %esp              # remove locals
    popl    %edi                   
    popl    %esi                   
    popl    %ebx                   
    popl    %ebp                   
    ret                            

    # scope gcd_mod
gcd_mod:
    # stack offsets:
    #      8(%ebp)   4  [ %a        <ptr(4) to <array 2 of <int>>> %ebp+8 ]
    #    -16(%ebp)   4  [ $t        <int> %ebp-16 ]
    #    -20(%ebp)   4  [ $t11      <int> %ebp-20 ]
    #    -24(%ebp)   4  [ $t12      <int> %ebp-24 ]
    #    -28(%ebp)   4  [ $t13      <int> %ebp-28 ]
    #    -32(%ebp)   4  [ $t14      <int> %ebp-32 ]
    #    -36(%ebp)   4  [ $t15      <int> %ebp-36 ]
    #    -40(%ebp)   4  [ $t16      <int> %ebp-40 ]
    #    -44(%ebp)   4  [ $t17      <int> %ebp-44 ]
    #    -48(%ebp)   4  [ $t18      <int> %ebp-48 ]
    #    -52(%ebp)   4  [ $t19      <int> %ebp-52 ]
    #    -56(%ebp)   4  [ $t20      <int> %ebp-56 ]
    #    -60(%ebp)   4  [ $t21      <int> %ebp-60 ]
    #    -64(%ebp)   4  [ $t22      <int> %ebp-64 ]
    #    -68(%ebp)   4  [ $t23      <int> %ebp-68 ]
    #    -72(%ebp)   4  [ $t24      <int> %ebp-72 ]
    #    -76(%ebp)   4  [ $t25      <int> %ebp-76 ]
    #    -80(%ebp)   4  [ $t26      <int> %ebp-80 ]
    #    -84(%ebp)   4  [ $t27      <int> %ebp-84 ]
    #    -88(%ebp)   4  [ $t28      <int> %ebp-88 ]
    #    -92(%ebp)   4  [ $t29      <int> %ebp-92 ]
    #    -96(%ebp)   4  [ $t30      <int> %ebp-96 ]
    #   -100(%ebp)   4  [ $t31      <int> %ebp-100 ]
    #   -104(%ebp)   4  [ $t32      <int> %ebp-104 ]
    #   -108(%ebp)   4  [ $t33      <int> %ebp-108 ]
    #   -112(%ebp)   4  [ $t34      <int> %ebp-112 ]
    #   -116(%ebp)   4  [ $t35      <int> %ebp-116 ]
    #   -120(%ebp)   4  [ $t36      <int> %ebp-120 ]
    #   -124(%ebp)   4  [ $t37      <int> %ebp-124 ]
    #   -128(%ebp)   4  [ $t38      <int> %ebp-128 ]
    #   -132(%ebp)   4  [ $t39      <int> %ebp-132 ]
    #   -136(%ebp)   4  [ $t40      <int> %ebp-136 ]
    #   -140(%ebp)   4  [ $t41      <int> %ebp-140 ]

    # prologue
    pushl   %ebp                   
    movl    %esp, %ebp             
    pushl   %ebx                    # save callee saved registers
    pushl   %esi                   
    pushl   %edi                   
    subl    $128, %esp              # make room for locals

    cld                             # memset local stack area to 0
    xorl    %eax, %eax             
    movl    $32, %ecx              
    mov     %esp, %edi             
    rep     stosl                  

    # function body
l_gcd_mod_1_while_cond:
    movl    8(%ebp), %eax           #   1:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   2:     if     a # 0 goto 2_while_body
    movl    $0, %ebx               
    cmpl    %ebx, %eax             
    jne     l_gcd_mod_2_while_body 
    jmp     l_gcd_mod_0             #   3:     goto   0
l_gcd_mod_2_while_body:
    movl    8(%ebp), %eax           #   5:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   6:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   7:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   8:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   9:     param  0 <- a
    pushl   %eax                   
    jmp     l_gcd_mod_1_while_cond  #  10:     goto   1_while_cond
l_gcd_mod_0:
    movl    8(%ebp), %eax           #  12:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  13:     return a
    jmp     l_gcd_mod_exit         

l_gcd_mod_exit:
    # epilogue
    addl    $128, %esp              # remove locals
    popl    %edi                   
    popl    %esi                   
    popl    %ebx                   
    popl    %ebp                   
    ret                            

    # scope gcd_rec
gcd_rec:
    # stack offsets:
    #      8(%ebp)   4  [ %a        <ptr(4) to <array 2 of <int>>> %ebp+8 ]
    #    -16(%ebp)   4  [ $t        <int> %ebp-16 ]
    #    -20(%ebp)   4  [ $t11      <int> %ebp-20 ]
    #    -24(%ebp)   4  [ $t12      <int> %ebp-24 ]
    #    -28(%ebp)   4  [ $t13      <int> %ebp-28 ]
    #    -32(%ebp)   4  [ $t14      <int> %ebp-32 ]
    #    -36(%ebp)   4  [ $t15      <int> %ebp-36 ]
    #    -40(%ebp)   4  [ $t16      <int> %ebp-40 ]
    #    -44(%ebp)   4  [ $t17      <int> %ebp-44 ]
    #    -48(%ebp)   4  [ $t18      <int> %ebp-48 ]
    #    -52(%ebp)   4  [ $t19      <int> %ebp-52 ]
    #    -56(%ebp)   4  [ $t20      <int> %ebp-56 ]
    #    -60(%ebp)   4  [ $t21      <int> %ebp-60 ]
    #    -64(%ebp)   4  [ $t22      <int> %ebp-64 ]
    #    -68(%ebp)   4  [ $t23      <int> %ebp-68 ]
    #    -72(%ebp)   4  [ $t24      <int> %ebp-72 ]
    #    -76(%ebp)   4  [ $t25      <int> %ebp-76 ]
    #    -80(%ebp)   4  [ $t26      <int> %ebp-80 ]
    #    -84(%ebp)   4  [ $t27      <int> %ebp-84 ]
    #    -88(%ebp)   4  [ $t28      <int> %ebp-88 ]
    #    -92(%ebp)   4  [ $t29      <int> %ebp-92 ]
    #    -96(%ebp)   4  [ $t30      <int> %ebp-96 ]
    #   -100(%ebp)   4  [ $t31      <int> %ebp-100 ]
    #   -104(%ebp)   4  [ $t32      <int> %ebp-104 ]
    #   -108(%ebp)   4  [ $t33      <int> %ebp-108 ]
    #   -112(%ebp)   4  [ $t34      <int> %ebp-112 ]
    #   -116(%ebp)   4  [ $t35      <int> %ebp-116 ]
    #   -120(%ebp)   4  [ $t36      <int> %ebp-120 ]
    #   -124(%ebp)   4  [ $t37      <int> %ebp-124 ]
    #   -128(%ebp)   4  [ $t38      <int> %ebp-128 ]
    #   -132(%ebp)   4  [ $t39      <int> %ebp-132 ]
    #   -136(%ebp)   4  [ $t40      <int> %ebp-136 ]
    #   -140(%ebp)   4  [ $t41      <int> %ebp-140 ]
    #   -144(%ebp)   4  [ $t42      <int> %ebp-144 ]
    #   -148(%ebp)   4  [ $t43      <int> %ebp-148 ]
    #   -152(%ebp)   4  [ $t44      <int> %ebp-152 ]
    #   -156(%ebp)   4  [ $t45      <int> %ebp-156 ]
    #   -160(%ebp)   4  [ $t46      <int> %ebp-160 ]

    # prologue
    pushl   %ebp                   
    movl    %esp, %ebp             
    pushl   %ebx                    # save callee saved registers
    pushl   %esi                   
    pushl   %edi                   
    subl    $148, %esp              # make room for locals

    cld                             # memset local stack area to 0
    xorl    %eax, %eax             
    movl    $37, %ecx              
    mov     %esp, %edi             
    rep     stosl                  

    # function body
    movl    8(%ebp), %eax           #   0:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   1:     if     a = 0 goto 1_if_true
    movl    $0, %ebx               
    cmpl    %ebx, %eax             
    je      l_gcd_rec_1_if_true    
    jmp     l_gcd_rec_2_if_false    #   2:     goto   2_if_false
l_gcd_rec_1_if_true:
    movl    8(%ebp), %eax           #   4:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   5:     return a
    jmp     l_gcd_rec_exit         
    jmp     l_gcd_rec_0             #   6:     goto   0
l_gcd_rec_2_if_false:
    movl    8(%ebp), %eax           #   8:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #   9:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  10:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  11:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  12:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  13:     param  0 <- a
    pushl   %eax                   
    movl    8(%ebp), %eax           #  14:     param  0 <- a
    pushl   %eax                   
    movl    gcd_rec, %eax           #  15:     return gcd_rec
    jmp     l_gcd_rec_exit         
l_gcd_rec_0:

l_gcd_rec_exit:
    # epilogue
    addl    $148, %esp              # remove locals
    popl    %edi                   
    popl    %esi                   
    popl    %ebx                   
    popl    %ebp                   
    ret                            

    # scope ReadNumbers
ReadNumbers:
    # stack offsets:
    #    -16(%ebp)   4  [ $i        <int> %ebp-16 ]
    #      8(%ebp)   4  [ %n        <ptr(4) to <array 2 of <int>>> %ebp+8 ]
    #    -20(%ebp)   4  [ $t11      <ptr(4) to <array 22 of <char>>> %ebp-20 ]
    #    -24(%ebp)   4  [ $t12      <int> %ebp-24 ]
    #    -28(%ebp)   4  [ $t13      <int> %ebp-28 ]
    #    -32(%ebp)   4  [ $t14      <int> %ebp-32 ]
    #    -36(%ebp)   4  [ $t15      <int> %ebp-36 ]
    #    -40(%ebp)   4  [ $t16      <int> %ebp-40 ]
    #    -44(%ebp)   4  [ $t17      <ptr(4) to <array 22 of <char>>> %ebp-44 ]
    #    -48(%ebp)   4  [ $t18      <int> %ebp-48 ]
    #    -52(%ebp)   4  [ $t19      <int> %ebp-52 ]
    #    -56(%ebp)   4  [ $t20      <int> %ebp-56 ]
    #    -60(%ebp)   4  [ $t21      <int> %ebp-60 ]
    #    -64(%ebp)   4  [ $t22      <int> %ebp-64 ]

    # prologue
    pushl   %ebp                   
    movl    %esp, %ebp             
    pushl   %ebx                    # save callee saved registers
    pushl   %esi                   
    pushl   %edi                   
    subl    $52, %esp               # make room for locals

    cld                             # memset local stack area to 0
    xorl    %eax, %eax             
    movl    $13, %ecx              
    mov     %esp, %edi             
    rep     stosl                  

    # function body
    movzbl  _str_1, %eax            #   0:     param  0 <- _str_1
    pushl   %eax                   
    call    WriteStr                #   1:     call   WriteStr
    addl    $4, %esp               
    movl    8(%ebp), %eax           #   2:     param  0 <- n
    pushl   %eax                   
    movzbl  _str_2, %eax            #   3:     param  0 <- _str_2
    pushl   %eax                   
    call    WriteStr                #   4:     call   WriteStr
    addl    $4, %esp               
    movl    8(%ebp), %eax           #   5:     param  0 <- n
    pushl   %eax                   

l_ReadNumbers_exit:
    # epilogue
    addl    $52, %esp               # remove locals
    popl    %edi                   
    popl    %esi                   
    popl    %ebx                   
    popl    %ebp                   
    ret                            

    # scope gcd
main:
    # stack offsets:
    #    -16(%ebp)   4  [ $t0       <ptr(4) to <array 25 of <char>>> %ebp-16 ]
    #    -20(%ebp)   4  [ $t1       <ptr(4) to <array 2 of <int>>> %ebp-20 ]
    #    -24(%ebp)   4  [ $t10      <int> %ebp-24 ]
    #    -28(%ebp)   4  [ $t2       <ptr(4) to <array 14 of <char>>> %ebp-28 ]
    #    -32(%ebp)   4  [ $t3       <ptr(4) to <array 2 of <int>>> %ebp-32 ]
    #    -36(%ebp)   4  [ $t4       <int> %ebp-36 ]
    #    -40(%ebp)   4  [ $t5       <ptr(4) to <array 14 of <char>>> %ebp-40 ]
    #    -44(%ebp)   4  [ $t6       <ptr(4) to <array 2 of <int>>> %ebp-44 ]
    #    -48(%ebp)   4  [ $t7       <int> %ebp-48 ]
    #    -52(%ebp)   4  [ $t8       <ptr(4) to <array 14 of <char>>> %ebp-52 ]
    #    -56(%ebp)   4  [ $t9       <ptr(4) to <array 2 of <int>>> %ebp-56 ]

    # prologue
    pushl   %ebp                   
    movl    %esp, %ebp             
    pushl   %ebx                    # save callee saved registers
    pushl   %esi                   
    pushl   %edi                   
    subl    $44, %esp               # make room for locals

    cld                             # memset local stack area to 0
    xorl    %eax, %eax             
    movl    $11, %ecx              
    mov     %esp, %edi             
    rep     stosl                  

    # function body
    movzbl  _str_3, %eax            #   0:     param  0 <- _str_3
    pushl   %eax                   
    call    WriteStr                #   1:     call   WriteStr
    addl    $4, %esp               
    call    WriteLn                 #   2:     call   WriteLn
    call    WriteLn                 #   3:     call   WriteLn
    movl    n, %eax                 #   4:     param  0 <- n
    pushl   %eax                   
    call    ReadNumbers             #   5:     call   ReadNumbers
    addl    $4, %esp               
    movzbl  _str_4, %eax            #   6:     param  0 <- _str_4
    pushl   %eax                   
    call    WriteStr                #   7:     call   WriteStr
    addl    $4, %esp               
    movl    n, %eax                 #   8:     param  0 <- n
    pushl   %eax                   
    movl    gcd_iter, %eax          #   9:     param  0 <- gcd_iter
    pushl   %eax                   
    call    WriteInt                #  10:     call   WriteInt
    addl    $4, %esp               
    call    WriteLn                 #  11:     call   WriteLn
    movzbl  _str_5, %eax            #  12:     param  0 <- _str_5
    pushl   %eax                   
    call    WriteStr                #  13:     call   WriteStr
    addl    $4, %esp               
    movl    n, %eax                 #  14:     param  0 <- n
    pushl   %eax                   
    movl    gcd_mod, %eax           #  15:     param  0 <- gcd_mod
    pushl   %eax                   
    call    WriteInt                #  16:     call   WriteInt
    addl    $4, %esp               
    call    WriteLn                 #  17:     call   WriteLn
    movzbl  _str_6, %eax            #  18:     param  0 <- _str_6
    pushl   %eax                   
    call    WriteStr                #  19:     call   WriteStr
    addl    $4, %esp               
    movl    n, %eax                 #  20:     param  0 <- n
    pushl   %eax                   
    movl    gcd_rec, %eax           #  21:     param  0 <- gcd_rec
    pushl   %eax                   
    call    WriteInt                #  22:     call   WriteInt
    addl    $4, %esp               
    call    WriteLn                 #  23:     call   WriteLn

l_gcd_exit:
    # epilogue
    addl    $44, %esp               # remove locals
    popl    %edi                   
    popl    %esi                   
    popl    %ebx                   
    popl    %ebp                   
    ret                            

    # end of text section
    #-----------------------------------------

    #-----------------------------------------
    # global data section
    #
    .data
    .align 4

    # scope: gcd
_str_1:                             # <array 22 of <char>>
    .long    1
    .long   22
    .asciz "Enter first number : "
    .align   4
_str_2:                             # <array 22 of <char>>
    .long    1
    .long   22
    .asciz "Enter second number: "
    .align   4
_str_3:                             # <array 25 of <char>>
    .long    1
    .long   25
    .asciz "Greatest commond divisor"
    .align   4
_str_4:                             # <array 14 of <char>>
    .long    1
    .long   14
    .asciz " subtract  : "
    .align   4
_str_5:                             # <array 14 of <char>>
    .long    1
    .long   14
    .asciz " divide    : "
    .align   4
_str_6:                             # <array 14 of <char>>
    .long    1
    .long   14
    .asciz " recursive : "
    .align   4
n:                                  # <array 2 of <int>>
    .long    1
    .long    2
    .skip    8





    # end of global data section
    #-----------------------------------------

    .end
##################################################
