##################################################
# primes
#

    #-----------------------------------------
    # text section
    #
    .text
    .align 4

    # entry point and pre-defined functions
    .global main
    .extern DIM
    .extern DOFS
    .extern ReadInt
    .extern WriteInt
    .extern WriteStr
    .extern WriteChar
    .extern WriteLn

    # scope CalcPrimes
CalcPrimes:
    # stack offsets:
    #    -16(%ebp)   4  [ $N        <int> %ebp-16 ]
    #    -20(%ebp)   4  [ $i        <int> %ebp-20 ]
    #    -21(%ebp)   1  [ $isprime  <bool> %ebp-21 ]
    #     12(%ebp)   4  [ %n        <int> %ebp+12 ]
    #      8(%ebp)   4  [ %p        <ptr(4) to <array of <int>>> %ebp+8 ]
    #    -28(%ebp)   4  [ $pidx     <int> %ebp-28 ]
    #    -32(%ebp)   4  [ $psqrt    <int> %ebp-32 ]
    #    -36(%ebp)   4  [ $t10      <int> %ebp-36 ]
    #    -40(%ebp)   4  [ $t11      <int> %ebp-40 ]
    #    -44(%ebp)   4  [ $t12      <int> %ebp-44 ]
    #    -48(%ebp)   4  [ $t13      <int> %ebp-48 ]
    #    -52(%ebp)   4  [ $t14      <int> %ebp-52 ]
    #    -56(%ebp)   4  [ $t15      <int> %ebp-56 ]
    #    -60(%ebp)   4  [ $t16      <int> %ebp-60 ]
    #    -64(%ebp)   4  [ $t17      <int> %ebp-64 ]
    #    -68(%ebp)   4  [ $t18      <int> %ebp-68 ]
    #    -72(%ebp)   4  [ $t19      <int> %ebp-72 ]
    #    -76(%ebp)   4  [ $t20      <int> %ebp-76 ]
    #    -80(%ebp)   4  [ $t21      <int> %ebp-80 ]
    #    -84(%ebp)   4  [ $t22      <int> %ebp-84 ]
    #    -88(%ebp)   4  [ $t23      <int> %ebp-88 ]
    #    -92(%ebp)   4  [ $t24      <int> %ebp-92 ]
    #    -96(%ebp)   4  [ $t25      <int> %ebp-96 ]
    #   -100(%ebp)   4  [ $t26      <int> %ebp-100 ]
    #   -104(%ebp)   4  [ $t27      <int> %ebp-104 ]
    #   -108(%ebp)   4  [ $t28      <int> %ebp-108 ]
    #   -112(%ebp)   4  [ $t29      <int> %ebp-112 ]
    #   -116(%ebp)   4  [ $t30      <int> %ebp-116 ]
    #   -120(%ebp)   4  [ $t31      <int> %ebp-120 ]
    #   -124(%ebp)   4  [ $t32      <int> %ebp-124 ]
    #   -128(%ebp)   4  [ $t33      <ptr(4) to <array 45 of <char>>> %ebp-128 ]
    #   -132(%ebp)   4  [ $t34      <int> %ebp-132 ]
    #   -136(%ebp)   4  [ $t35      <int> %ebp-136 ]
    #   -140(%ebp)   4  [ $t36      <int> %ebp-140 ]
    #   -144(%ebp)   4  [ $t37      <int> %ebp-144 ]
    #   -148(%ebp)   4  [ $t38      <int> %ebp-148 ]
    #   -152(%ebp)   4  [ $t39      <int> %ebp-152 ]
    #   -156(%ebp)   4  [ $t40      <int> %ebp-156 ]
    #   -160(%ebp)   4  [ $t41      <int> %ebp-160 ]
    #   -164(%ebp)   4  [ $t42      <int> %ebp-164 ]
    #   -168(%ebp)   4  [ $t43      <int> %ebp-168 ]
    #   -172(%ebp)   4  [ $t44      <int> %ebp-172 ]
    #   -176(%ebp)   4  [ $t45      <ptr(4) to <array 7 of <char>>> %ebp-176 ]
    #   -180(%ebp)   4  [ $t46      <ptr(4) to <array 7 of <char>>> %ebp-180 ]
    #   -184(%ebp)   4  [ $t47      <ptr(4) to <array 15 of <char>>> %ebp-184 ]
    #   -188(%ebp)   4  [ $t6       <ptr(4) to <array 30 of <char>>> %ebp-188 ]
    #   -192(%ebp)   4  [ $t7       <ptr(4) to <array 4 of <char>>> %ebp-192 ]
    #   -196(%ebp)   4  [ $t8       <int> %ebp-196 ]
    #   -200(%ebp)   4  [ $t9       <int> %ebp-200 ]
    #   -204(%ebp)   4  [ $v        <int> %ebp-204 ]

    # prologue
    pushl   %ebp                   
    movl    %esp, %ebp             
    pushl   %ebx                    # save callee saved registers
    pushl   %esi                   
    pushl   %edi                   
    subl    $192, %esp              # make room for locals

    cld                             # memset local stack area to 0
    xorl    %eax, %eax             
    movl    $48, %ecx              
    mov     %esp, %edi             
    rep     stosl                  

    # function body
    movzbl  _str_1, %eax            #   0:     param  0 <- _str_1
    pushl   %eax                   
    call    WriteStr                #   1:     call   WriteStr
    addl    $4, %esp               
    movl    12(%ebp), %eax          #   2:     param  0 <- n
    pushl   %eax                   
    call    WriteInt                #   3:     call   WriteInt
    addl    $4, %esp               
    movzbl  _str_2, %eax            #   4:     param  0 <- _str_2
    pushl   %eax                   
    call    WriteStr                #   5:     call   WriteStr
    addl    $4, %esp               
    movl    $1, %eax                #   6:     param  1 <- 1
    pushl   %eax                   
    movl    8(%ebp), %eax           #   7:     param  0 <- p
    pushl   %eax                   
    movl    DIM, %eax               #   8:     assign N <- DIM
    movl    %eax, -16(%ebp)        
    movl    DIM, %eax               #   9:     if     DIM < 1 goto 5_if_true
    movl    $1, %ebx               
    cmpl    %ebx, %eax             
    jl      l_CalcPrimes_5_if_true 
    jmp     l_CalcPrimes_6_if_false #  10:     goto   6_if_false
l_CalcPrimes_5_if_true:
    movl    $0, %eax                #  12:     return 0
    jmp     l_CalcPrimes_exit      
    jmp     l_CalcPrimes_4          #  13:     goto   4
l_CalcPrimes_6_if_false:
l_CalcPrimes_4:
    movl    8(%ebp), %eax           #  16:     param  0 <- p
    pushl   %eax                   
    movl    8(%ebp), %eax           #  17:     param  0 <- p
    pushl   %eax                   
    movl    $2, %eax                #  18:     assign pidx <- 2
    movl    %eax, -28(%ebp)        
    movl    $1, %eax                #  19:     assign psqrt <- 1
    movl    %eax, -32(%ebp)        
    movl    $3, %eax                #  20:     assign v <- 3
    movl    %eax, -204(%ebp)       
l_CalcPrimes_15_while_cond:
    movl    -204(%ebp), %eax        #  22:     if     v <= n goto 16_while_body
    movl    12(%ebp), %ebx         
    cmpl    %ebx, %eax             
    jle     l_CalcPrimes_16_while_body
    jmp     l_CalcPrimes_14         #  23:     goto   14
l_CalcPrimes_16_while_body:
    movl    $1, %eax                #  25:     assign isprime <- 1
    movb    %al, -21(%ebp)         
    movl    $1, %eax                #  26:     assign i <- 1
    movl    %eax, -20(%ebp)        
l_CalcPrimes_21_while_cond:
    movzbl  -21(%ebp), %eax         #  28:     if     isprime = 1 goto 23
    movl    $1, %ebx               
    cmpl    %ebx, %eax             
    je      l_CalcPrimes_23        
    jmp     l_CalcPrimes_20         #  29:     goto   20
l_CalcPrimes_23:
    movl    -20(%ebp), %eax         #  31:     if     i <= psqrt goto 22_while_body
    movl    -32(%ebp), %ebx        
    cmpl    %ebx, %eax             
    jle     l_CalcPrimes_22_while_body
    jmp     l_CalcPrimes_20         #  32:     goto   20
l_CalcPrimes_22_while_body:
    movl    8(%ebp), %eax           #  34:     param  0 <- p
    pushl   %eax                   
    movl    8(%ebp), %eax           #  35:     param  0 <- p
    pushl   %eax                   
    movl    -204(%ebp), %eax        #  36:     if     v = v goto 26_if_true
    movl    -204(%ebp), %ebx       
    cmpl    %ebx, %eax             
    je      l_CalcPrimes_26_if_true
    jmp     l_CalcPrimes_27_if_false #  37:     goto   27_if_false
l_CalcPrimes_26_if_true:
    movl    $0, %eax                #  39:     assign isprime <- 0
    movb    %al, -21(%ebp)         
    jmp     l_CalcPrimes_25         #  40:     goto   25
l_CalcPrimes_27_if_false:
l_CalcPrimes_25:
    movl    -20(%ebp), %eax         #  43:     assign i <- i
    movl    %eax, -20(%ebp)        
    jmp     l_CalcPrimes_21_while_cond #  44:     goto   21_while_cond
l_CalcPrimes_20:
    movzbl  -21(%ebp), %eax         #  46:     if     isprime = 1 goto 32_if_true
    movl    $1, %ebx               
    cmpl    %ebx, %eax             
    je      l_CalcPrimes_32_if_true
    jmp     l_CalcPrimes_33_if_false #  47:     goto   33_if_false
l_CalcPrimes_32_if_true:
    movl    8(%ebp), %eax           #  49:     param  0 <- p
    pushl   %eax                   
    movl    -28(%ebp), %eax         #  50:     assign pidx <- pidx
    movl    %eax, -28(%ebp)        
    movl    -28(%ebp), %eax         #  51:     if     pidx = N goto 38_if_true
    movl    -16(%ebp), %ebx        
    cmpl    %ebx, %eax             
    je      l_CalcPrimes_38_if_true
    jmp     l_CalcPrimes_39_if_false #  52:     goto   39_if_false
l_CalcPrimes_38_if_true:
    movzbl  _str_3, %eax            #  54:     param  0 <- _str_3
    pushl   %eax                   
    call    WriteStr                #  55:     call   WriteStr
    addl    $4, %esp               
    movl    $0, %eax                #  56:     assign n <- 0
    movl    %eax, 12(%ebp)         
    jmp     l_CalcPrimes_37         #  57:     goto   37
l_CalcPrimes_39_if_false:
l_CalcPrimes_37:
    jmp     l_CalcPrimes_31         #  60:     goto   31
l_CalcPrimes_33_if_false:
l_CalcPrimes_31:
    movl    -204(%ebp), %eax        #  63:     assign v <- v
    movl    %eax, -204(%ebp)       
    movl    8(%ebp), %eax           #  64:     param  0 <- p
    pushl   %eax                   
    movl    8(%ebp), %eax           #  65:     param  0 <- p
    pushl   %eax                   
    movl    8(%ebp), %eax           #  66:     mul    t43 <- p, p
    movl    8(%ebp), %ebx          
    imull   %ebx                   
    movl    %eax, -168(%ebp)       
    movl    -204(%ebp), %eax        #  67:     if     v > t43 goto 45_if_true
    movl    -168(%ebp), %ebx       
    cmpl    %ebx, %eax             
    jg      l_CalcPrimes_45_if_true
    jmp     l_CalcPrimes_46_if_false #  68:     goto   46_if_false
l_CalcPrimes_45_if_true:
    movl    -32(%ebp), %eax         #  70:     assign psqrt <- psqrt
    movl    %eax, -32(%ebp)        
    movl    -32(%ebp), %eax         #  71:     if     psqrt >= pidx goto 50_if_true
    movl    -28(%ebp), %ebx        
    cmpl    %ebx, %eax             
    jge     l_CalcPrimes_50_if_true
    jmp     l_CalcPrimes_51_if_false #  72:     goto   51_if_false
l_CalcPrimes_50_if_true:
    movzbl  _str_4, %eax            #  74:     param  0 <- _str_4
    pushl   %eax                   
    call    WriteStr                #  75:     call   WriteStr
    addl    $4, %esp               
    movl    $0, %eax                #  76:     assign n <- 0
    movl    %eax, 12(%ebp)         
    jmp     l_CalcPrimes_49         #  77:     goto   49
l_CalcPrimes_51_if_false:
l_CalcPrimes_49:
    jmp     l_CalcPrimes_44         #  80:     goto   44
l_CalcPrimes_46_if_false:
l_CalcPrimes_44:
    jmp     l_CalcPrimes_15_while_cond #  83:     goto   15_while_cond
l_CalcPrimes_14:
    movzbl  _str_5, %eax            #  85:     param  0 <- _str_5
    pushl   %eax                   
    call    WriteStr                #  86:     call   WriteStr
    addl    $4, %esp               
    movl    -28(%ebp), %eax         #  87:     param  0 <- pidx
    pushl   %eax                   
    call    WriteInt                #  88:     call   WriteInt
    addl    $4, %esp               
    movzbl  _str_6, %eax            #  89:     param  0 <- _str_6
    pushl   %eax                   
    call    WriteStr                #  90:     call   WriteStr
    addl    $4, %esp               
    call    WriteLn                 #  91:     call   WriteLn
    movl    -28(%ebp), %eax         #  92:     return pidx
    jmp     l_CalcPrimes_exit      

l_CalcPrimes_exit:
    # epilogue
    addl    $192, %esp              # remove locals
    popl    %edi                   
    popl    %esi                   
    popl    %ebx                   
    popl    %ebp                   
    ret                            

    # scope PrintPrimes
PrintPrimes:
    # stack offsets:
    #    -16(%ebp)   4  [ $i        <int> %ebp-16 ]
    #     12(%ebp)   4  [ %n        <int> %ebp+12 ]
    #      8(%ebp)   4  [ %p        <ptr(4) to <array of <int>>> %ebp+8 ]
    #     16(%ebp)   4  [ %pn       <int> %ebp+16 ]
    #    -20(%ebp)   4  [ $t10      <int> %ebp-20 ]
    #    -24(%ebp)   4  [ $t11      <int> %ebp-24 ]
    #    -28(%ebp)   4  [ $t12      <int> %ebp-28 ]
    #    -32(%ebp)   4  [ $t13      <int> %ebp-32 ]
    #    -36(%ebp)   4  [ $t14      <int> %ebp-36 ]
    #    -40(%ebp)   4  [ $t6       <ptr(4) to <array 20 of <char>>> %ebp-40 ]
    #    -44(%ebp)   4  [ $t7       <ptr(4) to <array 3 of <char>>> %ebp-44 ]
    #    -48(%ebp)   4  [ $t8       <int> %ebp-48 ]
    #    -52(%ebp)   4  [ $t9       <int> %ebp-52 ]

    # prologue
    pushl   %ebp                   
    movl    %esp, %ebp             
    pushl   %ebx                    # save callee saved registers
    pushl   %esi                   
    pushl   %edi                   
    subl    $40, %esp               # make room for locals

    cld                             # memset local stack area to 0
    xorl    %eax, %eax             
    movl    $10, %ecx              
    mov     %esp, %edi             
    rep     stosl                  

    # function body
    movzbl  _str_7, %eax            #   0:     param  0 <- _str_7
    pushl   %eax                   
    call    WriteStr                #   1:     call   WriteStr
    addl    $4, %esp               
    movl    12(%ebp), %eax          #   2:     param  0 <- n
    pushl   %eax                   
    call    WriteInt                #   3:     call   WriteInt
    addl    $4, %esp               
    call    WriteLn                 #   4:     call   WriteLn
    movl    $0, %eax                #   5:     assign i <- 0
    movl    %eax, -16(%ebp)        
l_PrintPrimes_5_while_cond:
    movl    -16(%ebp), %eax         #   7:     if     i < pn goto 6_while_body
    movl    16(%ebp), %ebx         
    cmpl    %ebx, %eax             
    jl      l_PrintPrimes_6_while_body
    jmp     l_PrintPrimes_4         #   8:     goto   4
l_PrintPrimes_6_while_body:
    movzbl  _str_8, %eax            #  10:     param  0 <- _str_8
    pushl   %eax                   
    call    WriteStr                #  11:     call   WriteStr
    addl    $4, %esp               
    movl    8(%ebp), %eax           #  12:     param  0 <- p
    pushl   %eax                   
    movl    8(%ebp), %eax           #  13:     param  0 <- p
    pushl   %eax                   
    call    WriteInt                #  14:     call   WriteInt
    addl    $4, %esp               
    movl    -16(%ebp), %eax         #  15:     assign i <- i
    movl    %eax, -16(%ebp)        
    movl    -16(%ebp), %eax         #  16:     if     i = i goto 12_if_true
    movl    -16(%ebp), %ebx        
    cmpl    %ebx, %eax             
    je      l_PrintPrimes_12_if_true
    jmp     l_PrintPrimes_13_if_false #  17:     goto   13_if_false
l_PrintPrimes_12_if_true:
    call    WriteLn                 #  19:     call   WriteLn
    jmp     l_PrintPrimes_11        #  20:     goto   11
l_PrintPrimes_13_if_false:
l_PrintPrimes_11:
    jmp     l_PrintPrimes_5_while_cond #  23:     goto   5_while_cond
l_PrintPrimes_4:
    call    WriteLn                 #  25:     call   WriteLn

l_PrintPrimes_exit:
    # epilogue
    addl    $40, %esp               # remove locals
    popl    %edi                   
    popl    %esi                   
    popl    %ebx                   
    popl    %ebp                   
    ret                            

    # scope primes
main:
    # stack offsets:
    #    -16(%ebp)   4  [ $t0       <ptr(4) to <array 14 of <char>>> %ebp-16 ]
    #    -20(%ebp)   4  [ $t1       <ptr(4) to <array 24 of <char>>> %ebp-20 ]
    #    -24(%ebp)   4  [ $t2       <int> %ebp-24 ]
    #    -28(%ebp)   4  [ $t3       <ptr(4) to <array 1000000 of <int>>> %ebp-28 ]
    #    -32(%ebp)   4  [ $t4       <int> %ebp-32 ]
    #    -36(%ebp)   4  [ $t5       <ptr(4) to <array 1000000 of <int>>> %ebp-36 ]

    # prologue
    pushl   %ebp                   
    movl    %esp, %ebp             
    pushl   %ebx                    # save callee saved registers
    pushl   %esi                   
    pushl   %edi                   
    subl    $24, %esp               # make room for locals

    cld                             # memset local stack area to 0
    xorl    %eax, %eax             
    movl    $6, %ecx               
    mov     %esp, %edi             
    rep     stosl                  

    # function body
    movzbl  _str_9, %eax            #   0:     param  0 <- _str_9
    pushl   %eax                   
    call    WriteStr                #   1:     call   WriteStr
    addl    $4, %esp               
    call    WriteLn                 #   2:     call   WriteLn
    movzbl  _str_10, %eax           #   3:     param  0 <- _str_10
    pushl   %eax                   
    call    WriteStr                #   4:     call   WriteStr
    addl    $4, %esp               
    movl    ReadInt, %eax           #   5:     param  1 <- ReadInt
    pushl   %eax                   
    movl    p, %eax                 #   6:     param  0 <- p
    pushl   %eax                   
    movl    CalcPrimes, %eax        #   7:     param  2 <- CalcPrimes
    pushl   %eax                   
    movl    ReadInt, %eax           #   8:     param  1 <- ReadInt
    pushl   %eax                   
    movl    p, %eax                 #   9:     param  0 <- p
    pushl   %eax                   
    call    PrintPrimes             #  10:     call   PrintPrimes
    addl    $12, %esp              

l_primes_exit:
    # epilogue
    addl    $24, %esp               # remove locals
    popl    %edi                   
    popl    %esi                   
    popl    %ebx                   
    popl    %ebp                   
    ret                            

    # end of text section
    #-----------------------------------------

    #-----------------------------------------
    # global data section
    #
    .data
    .align 4

    # scope: primes
_str_1:                             # <array 30 of <char>>
    .long    1
    .long   30
    .asciz "  computing primes from 1 to "
    .align   4
_str_10:                            # <array 24 of <char>>
    .long    1
    .long   24
    .asciz "Compute primes up to : "
_str_2:                             # <array 4 of <char>>
    .long    1
    .long    4
    .asciz "..."
_str_3:                             # <array 45 of <char>>
    .long    1
    .long   45
    .asciz "WARNING: array too small to hold all primes."
    .align   4
_str_4:                             # <array 7 of <char>>
    .long    1
    .long    7
    .asciz "ERROR."
    .align   4
_str_5:                             # <array 7 of <char>>
    .long    1
    .long    7
    .asciz "done. "
    .align   4
_str_6:                             # <array 15 of <char>>
    .long    1
    .long   15
    .asciz " primes found."
    .align   4
_str_7:                             # <array 20 of <char>>
    .long    1
    .long   20
    .asciz "Prime numbers 1 to "
_str_8:                             # <array 3 of <char>>
    .long    1
    .long    3
    .asciz "  "
    .align   4
_str_9:                             # <array 14 of <char>>
    .long    1
    .long   14
    .asciz "Prime numbers"
    .align   4
n:                                  # <int>
    .skip    4
p:                                  # <array 1000000 of <int>>
    .long    1
    .long 1000000
    .skip 4000000
pn:                                 # <int>
    .skip    4



    # end of global data section
    #-----------------------------------------

    .end
##################################################
