/* Constant-Propagation based on CFG
 * Author : team4 
 * Key Concept : changing .mod (with constant propagation)
 * Basic : skip array first (in implementation)
 */ 

//constant propagation 
//what about copy-propagation ?
//common sub-expression elimination 

#include <vector>
#include <memory>
#include <cassert>
#include <iostream>

#include "constant_propagation.h"

using namespace std;

using citCfgNode = list<shared_ptr<CfgNode>>::const_iterator;
using itCfgNode = list<shared_ptr<CfgNode>>::iterator;
using itCfgProc = vector<shared_ptr<CfgProc>>::iterator;

C_Propagation::C_Propagation(CfgIntraProc *cfg)
{
	_cfg = cfg;
	_num_of_int  = 0;
	_num_of_bool = 0;
	_num_of_char = 0;
	_m = cfg->GetCModule(); 
	_symtab = _m->GetSymbolTable();	
	_procs = cfg->GetProcs();
	for(int i=0; i<_procs.size();++i)
		_num_of_code_lines+=_procs[i]->GetNodeCnt();
	cntNumOfVariables();
	//do constant propagation first 
	//second erase the code line by dead-code elimination
	doConstantPropagation();
}

int C_Propagation::returnInstanceTypeForCTacAddr(CTacAddr *addr)
{
	// enum Type{
	// 	NAME=0,
	// 	CONSTANT=1,
	// 	LABEL,
	// };

	if(CTacName* v =dynamic_cast<CTacName*>(addr)){
		/*
		// check if array
		const CSymbol* symbol = v->GetSymbol();
		CType* dataType = const_cast<CType*>(symbol->GetDataType());
		if (dynamic_cast<CArrayType*>(dataType) == NULL)
		*/
			return NAME;
	}
	else if(CTacConst* v =dynamic_cast<CTacConst*>(addr))
		return CONSTANT;
	else
		return LABEL;
}

/* @Brief : check a node has only one reachable line 
 * 
 * 
 * 
 */

size_t C_Propagation::hasOnlyOneReachbleLine(shared_ptr<CfgNode>& node, int idx)
{
	CfgNode::REACH &reach = node->GetReachInfo();
	set<shared_ptr<CfgNode>>::iterator it = reach._liveIn.begin();
	int cnt=0;
	size_t line_number=-1;
	
	while(it!=reach._liveIn.end())
	{
		CTacInstr *inst      = const_cast<CTacInstr*>(node->GetInstr());
		CTacName *name       = dynamic_cast<CTacName*>(inst->GetSrc(idx));
		CSymbol *symbol      = const_cast<CSymbol*>(name->GetSymbol());
		string symbol_name   = symbol->GetName();

		CTacInstr *comp_inst = const_cast<CTacInstr*>((*it)->GetInstr());
		CTacName *comp       = dynamic_cast<CTacName*>(comp_inst->GetDest());
		CSymbol *comp_symbol = const_cast<CSymbol*>(comp->GetSymbol());
		//have to check whether this line has  CTacConstant 
		string comp_name     = comp_symbol->GetName();
		if(symbol_name == comp_name)
		{
			if(comp_inst!=nullptr)
				line_number=comp_inst->GetId();
			cnt++;
		}
		it++;
	}
	if(cnt==1)
		return line_number;
	else
		return -1;
}

// size_t C_Propagation::hasOnlyOneReachbleLinePtr(shared_ptr<CfgNode>& node, int idx)
// {
// 	CfgNode::REACH &reach = node->GetReachInfo();
// 	set<shared_ptr<CfgNode>>::iterator it = reach._liveIn.begin();
// 	size_t line_number=-1;

// 	const vector<CTacAddr*> &use = node->GetUse();
// 	const CTacName *addr = dynamic_cast<CTacName*>(use[0]);
// 	if(addr->GetSymbol()->GetDataType()->IsArray()){
// 		while(it!=reach._liveIn.end())
// 		{
// 			const CTacName *ptr = dynamic_cast<CTacName*>((*it)->GetDef());
// 			if(ptr->GetSymbol()->GetDataType()->IsPointer()){
// 				const vector<CTacAddr*> &prev_use = (*it)->GetUse();
// 				const CTacName *prev_addr = dynamic_cast<CTacName*>(prev_use[0]);
// 				if(prev_addr->GetSymbol()->GetDataType()->IsArray()){
// 					if(addr->equal_to(*prev_addr)){
// 						line_number = (*it)->GetInstr()->GetId();
// 						return line_number;
// 					}
// 				}
// 			}
// 			it++;
// 		}
// 	}
// 	return line_number;
// }

// void C_Propagation::ChangeToConstInOneLinePtr(CTacInstr *target_inst, shared_ptr<CfgNode>& node, int idx)
// {
// 	size_t target_line = hasOnlyOneReachbleLine(node, idx);
// 	size_t     my_line = target_inst->GetId();
// 	CCodeBlock *cb = node->GetOwner()->GetCCodeBlock();
// 	cb->setInstr(my_line, target_line, 1);
// }

void C_Propagation::ChangeToConstInOneLine(CTacInstr *target_inst, shared_ptr<CfgNode>& node, int idx)
{
	size_t target_line = hasOnlyOneReachbleLine(node, idx);
	size_t     my_line = target_inst->GetId();
	CCodeBlock *cb = node->GetOwner()->GetCCodeBlock();
	cb->setInstr(my_line, target_line, idx);
}

//binary operation 
int C_Propagation::GetOperationResult(EOperation target_op, int val1, int val2)
{
	
	int result;
	switch(target_op)
	{
		case opAdd:
			result = val1 + val2;
			break;
		case opSub:
			result = val1 - val2;
			break;
		case opMul:
			result = val1 * val2;
			break;
		case opDiv:
			result = val1 / val2;
			break;
		case opAnd:
			result = val1 & val2;
			break;
		case opOr:
			result = val1 | val2;
			break;
		default:
			break;
	}
	return result;
}

//unary operation 
int C_Propagation::GetOperationResult(EOperation target_op, int val1)
{
	int result;
	switch(target_op)
	{
		case opNeg:
			result = -val1;
			break;
		case opPos:
			result = +val1;
			break;
		case opNot:
			result = ~val1;
			break;
		default:
			break;
	}
	return result;
}


void C_Propagation::doConstantPropagation(void)
{
	//reaching definition -> in, out stores code line number 
	//simple algorithm -> very intuitive 
	/* if we have assignee in any node,
	(which means assignment block and we have to modfiy variable to constant)
	   we check that assignee's variable name and check whether there exists 
	   only 1 code_line(definition of assignee) for that assignee
	   then we can change it to constant through that line's constant 
	 */
	//No opSym in .mod 

	itCfgProc proc_it = _procs.begin();
	for(;proc_it<_procs.end();++proc_it)
	{
		const list<shared_ptr<CfgNode>>& nodeList_perProc = (*proc_it)->GetNodes();
		citCfgNode cit = nodeList_perProc.cbegin();

		while(cit!= nodeList_perProc.cend())
		{
			shared_ptr<CfgNode> node = (*cit);
			//cout<<node->GetId()<<" ";
			//only check has assignment to some variable 
			if(!(*cit)->GetUse().empty())
			{
				CTacInstr *target_inst= const_cast<CTacInstr*>(node->GetInstr());
				CTacAddr *src1 = target_inst->GetSrc(1);
				CTacAddr *src2 = target_inst->GetSrc(2);
				int num_src=target_inst->GetNumSrc();
				//# of src 0 : label
				//# of src 1 : unary operation and etc..(find it)
				//# of src 2 : binary operation 
				//binary operation :
				if(num_src==2)
				{
					cout<<"code line num : "<<target_inst->GetId();
					//if src is already const, then we don't need to handle about it
					//src1 is CTacName(CTacTemp , not CTacReference) -> must handle later
					if(src1->GetType()==CTacNameType)
					//if(returnInstanceTypeForCTacAddr(src1)==NAME)
					{
						if(hasOnlyOneReachbleLine(node,1)!=-1)
						{
							CTacName *src1_name = dynamic_cast<CTacName*>(src1);
							if(!src1_name->GetSymbol()->GetDataType()->IsArray() && 
								!src1_name->GetSymbol()->GetDataType()->IsPointer())
								ChangeToConstInOneLine(target_inst, node, 1);
						}
					} 
					if(src2->GetType()==CTacNameType)
					{
						if(hasOnlyOneReachbleLine(node,2)!=-1)
						{
							CTacName *src2_name = dynamic_cast<CTacName*>(src2);
							if(!src2_name->GetSymbol()->GetDataType()->IsArray() &&
								!src2_name->GetSymbol()->GetDataType()->IsPointer())
								ChangeToConstInOneLine(target_inst, node, 2);
						}		
					}
					//ChangeToConst
					//conversion to assign operation 
					size_t my_id = target_inst->GetId();
					CTacAddr *new_src1= target_inst->GetSrc(1);
					CTacAddr *new_src2= target_inst->GetSrc(2);
					//src2 is CTacName;
					//Both operand 1,2 is const, we can compute in compile time
					if(returnInstanceTypeForCTacAddr(new_src1)==CONSTANT 
						&& returnInstanceTypeForCTacAddr(new_src2)==CONSTANT)
					{
						EOperation target_op = target_inst->GetOperation();
						CTacConst *op1_instance = dynamic_cast<CTacConst*>(new_src1);
						CTacConst *op2_instance = dynamic_cast<CTacConst*>(new_src2);
						int val1 = op1_instance->GetValue();
						int val2 = op2_instance->GetValue();
						int result = GetOperationResult(target_op, val1, val2);
						
						cout<<"[val1 : "<<val1<<" val2: "<<val2<<" result :"<<result<<"]";
						
						//make EOperation type to opAssign(9) 
						target_inst->SetOperation(opAssign);
						CTacAddr *newConst = new CTacConst(result);
						target_inst->SetSrc1(newConst);
						target_inst->SetSrc2(nullptr);
					}
				}
				//unary operation or assign or pointer operation 
				else if(num_src==1)
				{
					//constant propagation 
					CTacAddr *src1 = target_inst->GetSrc(1);
					cout<<"code line num : "<<target_inst->GetId();
					//name
					if(returnInstanceTypeForCTacAddr(src1)==NAME)
					{
						if(hasOnlyOneReachbleLine(node,1)!=-1)
						{
							CTacName *src1_name = dynamic_cast<CTacName*>(src1);
							if(!src1_name->GetSymbol()->GetDataType()->IsArray() &&
								!src1_name->GetSymbol()->GetDataType()->IsPointer())
								ChangeToConstInOneLine(target_inst, node, 1);
						}
					}

					EOperation target_op = target_inst->GetOperation();
					if(target_op<=8) // means unary operation 
					{
						
						CTacAddr *new_src1 = target_inst->GetSrc(1);
						//check whether operand is constant 
						//if it's true than compute it on compile time and change it to assign operation 
						if(returnInstanceTypeForCTacAddr(new_src1)==CONSTANT)
						{
							CTacConst *op1_instance = dynamic_cast<CTacConst*>(new_src1);
							int val1 = op1_instance->GetValue();
							int result = GetOperationResult(target_op, val1);

							cout<<"[val1 : "<<val1<<" result: "<<result<<"]";

							//make EOPeration type to opAssign(9)
							target_inst->SetOperation(opAssign);
							CTacAddr *newConst = new CTacConst(result);
							target_inst->SetSrc1(newConst);
							target_inst->SetSrc2(nullptr);
						}
					}


				}
				cout<<endl;
			}
			cit++;
		}
	}
}


void C_Propagation::doInterProceduralConstantPropagation(void)
{


	// itCfgProc proc_it = _procs.begin();
	// for(;proc_it<_procs.end();++proc_it)
	// {
	// 	const list<shared_ptr<CfgNode>>& nodeList 
	// }











}

C_Propagation::~C_Propagation()
{
}


void C_Propagation::showNumOfPrimitive(void) const
{
	cout<<"number of INT  variable : "<<_num_of_int<<endl;
	cout<<"number of BOOL variable : "<<_num_of_bool<<endl;
	cout<<"number of CHAR variable : "<<_num_of_char<<endl;
}

CfgIntraProc* C_Propagation::getCFG(void) const
{
	return _cfg;
}

const CSymtab* C_Propagation::getCSymtab(void) const
{
	return _symtab;
}

size_t C_Propagation::getNumOfInt(void) const
{
	return _num_of_int;
} 

size_t C_Propagation::getNumOfBool(void) const
{
	return _num_of_bool;
} 
size_t C_Propagation::getNumOfChar(void) const
{
	return _num_of_char;
} 
size_t C_Propagation::getNumOfCodeBlocks(void) const
{
	return _num_of_code_lines;
}

void C_Propagation::cntNumOfVariables(void)
{
	const vector<CSymbol*> &list = _symtab->GetSymbols();
	for(int i=0; i<list.size(); ++i)
	{
		
		const CType* type = list[i]->GetDataType();
		if(type->IsBoolean())
			_num_of_bool++;
		else if(type->IsChar())
			_num_of_char++;
		else if(type->IsInt())
			_num_of_int++;

		//cout<<"name: "<<list[i]->GetName()<<" ";
		//cout<<"symbol type: "<<list[i]->GetSymbolType()<<" ";
		//cout<<list[i]->GetDataType()<<" ";
		//cout<<"data : ";
		//if(list[i]->GetData()!=nullptr)
		//	cout<<"data type: "<<list[i]->GetData();
		//cout<<"base register: "<<list[i]->GetBaseRegister()<<" ";
		//cout<<"offset: "<<list[i]->GetOffset()<<endl;

	}
}



// void C_Propagation::doDeadCodeElimination(void)
// {
// 	//store list of instructions which is definition 
// 	//we can check a<-b if a is in LiveOut on that list 
// 	//if not, then erase, if is then live 
// 	// no use but keep for urgency: list<shared_ptr<CfgNode>> def_list;
// 	itCfgProc proc_it = _procs.begin();
// 	for(;proc_it<_procs.end();++proc_it)
// 	{
// 		const list<shared_ptr<CfgNode>>& nodeList_perProc = (*proc_it)->GetNodes();
// 		citCfgNode cit = nodeList_perProc.cbegin();
// 		while(cit!= nodeList_perProc.cend())
// 		{
// 			const shared_ptr<CfgNode> &node = (*cit);
// 			//cout<<node->GetId()<<" ";
// 			//only check has assignment to some variable 
// 			if((*cit)->GetDef()!=nullptr)
// 			{
// 				//cout<<"def is not null :";
// 				CTacAddr *var = const_cast<CTacAddr*>(node->GetDef());
// 				CfgNode::LIVE &live = node->GetLiveInfo();
// 				//cout<<var<<endl;
// 				//dead-code found
// 				if(live._liveOut.find(var) == live._liveOut.end())
// 				{
// 					//first : erase CTacInstr* in that proc 
// 					cout<<"dead-code found on line number"<< node->GetId()<<endl;
// 					CTacInstr* target = const_cast<CTacInstr*>(node->GetInstr());
// 					size_t target_id = target->GetId();
// 					//don't touch the structure of InterCfgProc 
// 					//just access to CModule directly, after erasing then, data structure of InterCfgProc 
// 					//will be changed too, cz it's connected with pointers 
// 					//code_block for each prodecure(include main function)
// 					(*proc_it)->DelNode(node);//not works properly
// 					//cout<<target_id<<endl;
// 					CCodeBlock* cb = (*proc_it)->GetCCodeBlock();
// 					//erasing it from CCodeBlock 
// 					//implemented on CCodeBlock class in ir.h and ir.cpp 
// 					cb->DelInstr(target_id);
// 					/*erase that list 
// 					list<CTacInstr*> inst_list = cb->GetInstr();
// 					list<CTacInstr*>::const_iterator fuck = inst_list.begin();
// 					 while(fuck!=inst_list.end())
// 					{
// 						cout<<(*fuck)<<endl;
// 						fuck++;
// 					}
// 					*/
// 					//second : erase it from Symbol Table 
// 					//issue : if one variable def in 1, that is used in 2, and dead in 3
// 					//do we need to erase it from symbol table? 
// 					//thing to check : can be executed if d exists in symtab, but no exist in code line 
// 					//how to convert .s -> to binary file 
// 				}
// 			}

// 			cit++;
// 		}

// 	}


// 	//issue : can we modify .tac file's data-structure? 
// }



