/* Constant-Propagation based on CFG
 * Author : team4 
 * Key Concept : changing .mod (with constant propagation)
 * Basic : skip array first (in implementation)
 */ 

//constant propagation 
//common-subexpression elimination 

#include <vector>
#include <memory>
#include <cassert>
#include <iostream>

#include "deadcode_elimination.h"

using namespace std;

using citCfgNode = list<shared_ptr<CfgNode>>::const_iterator;
using itCfgNode = list<shared_ptr<CfgNode>>::iterator;
using itCfgProc = vector<shared_ptr<CfgProc>>::iterator;

D_Elimination::D_Elimination(CfgIntraProc *cfg)
{
	_cfg = cfg;
	_num_of_int  = 0;
	_num_of_bool = 0;
	_num_of_char = 0;
	_m = cfg->GetCModule(); 
	_symtab = _m->GetSymbolTable();	
	_procs = cfg->GetProcs();
	for(int i=0; i<_procs.size();++i)
		_num_of_code_lines+=_procs[i]->GetNodeCnt();
	cntNumOfVariables();
	//do constant propagation first 
	//second erase the code line by dead-code elimination
	//doConstantPropagation();
	doDeadCodeElimination();
	
}






void D_Elimination::doDeadCodeElimination(void)
{
	//store list of instructions which is definition 
	//we can check a<-b if a is in LiveOut on that list 
	//if not, then erase, if is then live 
	// no use but keep for urgency: list<shared_ptr<CfgNode>> def_list;
	itCfgProc proc_it = _procs.begin();
	for(;proc_it<_procs.end();++proc_it)
	{
		const list<shared_ptr<CfgNode>>& nodeList_perProc = (*proc_it)->GetNodes();
		citCfgNode cit = nodeList_perProc.cbegin();
		while(cit!= nodeList_perProc.cend())
		{
			shared_ptr<CfgNode> node = (*cit);
			//cout<<node->GetId()<<" ";
			//only check has assignment to some variable 
			
				/* code */
			
			if((*cit)->GetDef()!=nullptr)
			{
				//cout<<"def is not null :";
				CTacAddr *var = const_cast<CTacAddr*>(node->GetDef());
				CfgNode::LIVE &live = node->GetLiveInfo();
				//dead-code found : can't find var in liveOut
				set<CTacAddr*>::iterator tacit=live._liveOut.begin();
				CTacName *var_name = dynamic_cast<CTacName*>(var);
				CSymbol *var_name_symbol = const_cast<CSymbol*>(var_name->GetSymbol());
				string name_of_def = var_name_symbol->GetName();
				bool dead_flag=true;

				while(tacit!=live._liveOut.end())
				{
					CTacAddr *adr = *tacit;	
					if(CTacName *v = dynamic_cast<CTacName*>(adr))
					{

						CTacName *comp_name = dynamic_cast<CTacName*>(adr);
						CSymbol *comp_name_symbol = const_cast<CSymbol*>(comp_name->GetSymbol());
						string name_of_comp = comp_name_symbol->GetName();
						if(name_of_def==name_of_comp)
						{
							dead_flag=false;
							break;
						}
					}
					tacit++;
				}

//**************************************************************************************************
				//if '@' exists in dst, src1, src2 . then skip code elimination 
				// bool flag_r=false;

				// citCfgNode tmpit = (node->GetSuccs().cbegin());	
				// if((*tmpit)!=nullptr)
				// {
				// 	while(tmpit!=node->GetSuccs().cend())
				// 	{
				// 		shared_ptr<CfgNode> tmpit_cfgnode = *tmpit;

				// 		CTacInstr *tmp_instr=const_cast<CTacInstr*>(tmpit_cfgnode->GetInstr());
				// 		//cout<<tmp_instr;

				// 		CTac *tmp_dst = tmp_instr->GetDest();
				// 		if(CTacName* v =dynamic_cast<CTacName*>(tmp_dst))
				// 		{
				// 			CSymbol *tmpsym_dst = const_cast<CSymbol*>(v->GetSymbol());
				// 			string str_dst=tmpsym_dst->GetName();
				// 			if(str_dst.find("@")!=string::npos)
				// 				flag_r=true;
				// 		}


				// 		CTacAddr * tmp_src1=tmp_instr->GetSrc(1);
				// 		if(CTacName* v =dynamic_cast<CTacName*>(tmp_src1))
				// 		{
				// 			CSymbol *tmpsym_src1 = const_cast<CSymbol*>(v->GetSymbol());
				// 			string str_src1=tmpsym_src1->GetName();
				// 			if(str_src1.find("@")!=string::npos)
				// 				flag_r=true;
				// 		}
				
				// 		CTacAddr * tmp_src2=tmp_instr->GetSrc(2);
				// 		if(CTacName* v =dynamic_cast<CTacName*>(tmp_src1))
				// 		{
				// 			CSymbol *tmpsym_src2 = const_cast<CSymbol*>(v->GetSymbol());
				// 			string str_src2=tmpsym_src2->GetName();
				// 			if(str_src2.find("@")!=string::npos)
				// 				flag_r=true;
				// 		}
				// 		tmpit++;
				// 	}
				// }
				// if(flag_r==true)
				// {
					
				// 	continue;
				// }
//*****************************************************************************************************





				if(dead_flag)
				{
					cout<<"dead-code found on line number"<< node->GetId()<<endl;
					CTacInstr* target = const_cast<CTacInstr*>(node->GetInstr());
					size_t target_id = target->GetId();
					CCodeBlock* cb = (*proc_it)->GetCCodeBlock();
					cb->DelInstr(target_id);
					//-----added for cfg----------
					(*(proc_it))->DelNode(*(cit)++);
						continue;
					//----------------------------


				}
				
				//cout<<"-end line"<<endl;

				// if(live._liveOut.find(var) == live._liveOut.end())
				// {

				// 	//first : erase CTacInstr* in that proc 
				// 	cout<<"dead-code found on line number"<< node->GetId()<<endl;
				// 	CTacInstr* target = const_cast<CTacInstr*>(node->GetInstr());
				// 	size_t target_id = target->GetId();
				// 	//don't touch the structure of InterCfgProc 
				// 	//just access to CModule directly, after erasing then, data structure of InterCfgProc 
				// 	//will be changed too, cz it's connected with pointers 
				// 	//code_block for each prodecure(include main function)
				// 	//(*proc_it)->DelNode(node);//not works properly 
				// 	//cout<<target_id<<endl;
				// 	CCodeBlock* cb = (*proc_it)->GetCCodeBlock();
				// 	//erasing it from CCodeBlock 
				// 	//implemented on CCodeBlock class in ir.h and ir.cpp 
				// 	cb->DelInstr(target_id);
				// 	/*erase that list 
				// 	list<CTacInstr*> inst_list = cb->GetInstr();
				// 	list<CTacInstr*>::const_iterator fuck = inst_list.begin();
				// 	 while(fuck!=inst_list.end())
				// 	{
				// 		cout<<(*fuck)<<endl;
				// 		fuck++;
				// 	}
				// 	*/
				// 	//second : erase it from Symbol Table 
				// 	//issue : if one variable def in 1, that is used in 2, and dead in 3
				// 	//do we need to erase it from symbol table? 
				// 	//thing to check : can be executed if d exists in symtab, but no exist in code line 
				// 	//how to convert .s -> to binary file 
				// }




			}
			cit++;
		}

	}


	//issue : can we modify .tac file's data-structure? 
}



D_Elimination::~D_Elimination()
{
}


void D_Elimination::showNumOfPrimitive(void) const
{
	cout<<"number of INT  variable : "<<_num_of_int<<endl;
	cout<<"number of BOOL variable : "<<_num_of_bool<<endl;
	cout<<"number of CHAR variable : "<<_num_of_char<<endl;
}

CfgIntraProc* D_Elimination::getCFG(void) const
{
	return _cfg;
}

const CSymtab* D_Elimination::getCSymtab(void) const
{
	return _symtab;
}

size_t D_Elimination::getNumOfInt(void) const
{
	return _num_of_int;
} 

size_t D_Elimination::getNumOfBool(void) const
{
	return _num_of_bool;
} 
size_t D_Elimination::getNumOfChar(void) const
{
	return _num_of_char;
} 
size_t D_Elimination::getNumOfCodeBlocks(void) const
{
	return _num_of_code_lines;
}

void D_Elimination::cntNumOfVariables(void)
{
	const vector<CSymbol*> &list = _symtab->GetSymbols();
	for(int i=0; i<list.size(); ++i)
	{
		const CType* type = list[i]->GetDataType();
		if(type->IsBoolean())
			_num_of_bool++;
		else if(type->IsChar())
			_num_of_char++;
		else if(type->IsInt())
			_num_of_int++;
	}
}





