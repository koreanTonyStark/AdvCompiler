digraph CfgInterProc {
  graph [fontname="Times New Roman",fontsize=10];
  node  [fontname="Courier New",fontsize=10];
  edge  [fontname="Times New Roman",fontsize=10];
// scope 'fibonacci'
node0 [label=" ENTER fibonacci\r   0:     &()    *t0 <- &_str_1\l",shape=box];
node0 -> node1;
node1 [label="  1:     param  0 <- t0\l",shape=box];
node1 -> node2;
node2 [label="  2:     call   WriteStr\l",shape=box];
node2 -> node3;
node3 [label="  3:     call   WriteLn\l",shape=box];
node3 -> node4;
node4 [label="  4:     call   WriteLn\l",shape=box];
node4 -> node5;
node5 [label="  5:     &()    *t1 <- &_str_2\l",shape=box];
node5 -> node6;
node6 [label="  6:     param  0 <- t1\l",shape=box];
node6 -> node7;
node7 [label="  7:     call   t2 <- ReadNumber\l",shape=box];
node7 -> node8;
node7 -> node47;
node8 [label="  8:     assign i <- t2\l",shape=box];
node8 -> node9;
node8 -> node50 [style=dotted];
node9 [label="  9: 5_while_cond:\l",shape=box];
node9 -> node10;
node10 [label=" 10:     if     i > 0 goto 6_while_body\l",shape=box];
node10 -> node12;
node10 -> node11;
node11 [label=" 11:     goto   4\l",shape=box];
node11 -> node31;
node12 [label=" 12: 6_while_body:\l",shape=box];
node12 -> node13;
node13 [label=" 13:     &()    *t3 <- &_str_3\l",shape=box];
node13 -> node14;
node14 [label=" 14:     param  0 <- t3\l",shape=box];
node14 -> node15;
node15 [label=" 15:     call   WriteStr\l",shape=box];
node15 -> node16;
node16 [label=" 16:     param  0 <- i\l",shape=box];
node16 -> node17;
node17 [label=" 17:     call   WriteInt\l",shape=box];
node17 -> node18;
node18 [label=" 18:     &()    *t4 <- &_str_4\l",shape=box];
node18 -> node19;
node19 [label=" 19:     param  0 <- t4\l",shape=box];
node19 -> node20;
node20 [label=" 20:     call   WriteStr\l",shape=box];
node20 -> node21;
node21 [label=" 21:     param  0 <- i\l",shape=box];
node21 -> node22;
node22 [label=" 22:     call   t5 <- fib\l",shape=box];
node22 -> node23;
node22 -> node32;
node23 [label=" 23:     param  0 <- t5\l",shape=box];
node23 -> node24;
node24 [label=" 24:     call   WriteInt\l",shape=box];
node24 -> node25;
node25 [label=" 25:     call   WriteLn\l",shape=box];
node25 -> node26;
node26 [label=" 26:     &()    *t6 <- &_str_5\l",shape=box];
node26 -> node27;
node27 [label=" 27:     param  0 <- t6\l",shape=box];
node27 -> node28;
node28 [label=" 28:     call   t7 <- ReadNumber\l",shape=box];
node28 -> node29;
node28 -> node47;
node29 [label=" 29:     assign i <- t7\l",shape=box];
node29 -> node30;
node30 [label=" 30:     goto   5_while_cond\l",shape=box];
node30 -> node9;
node31 [label=" EXIT fibonacci\r  31: 4:\l",shape=box];
// scope 'fib'
node32 [label=" ENTER fib\r   0:     if     n <= 1 goto 1_if_true\l",shape=box];
node32 -> node34;
node32 -> node33;
node33 [label="  1:     goto   2_if_false\l",shape=box];
node33 -> node37;
node34 [label="  2: 1_if_true:\l",shape=box];
node34 -> node35;
node35 [label="  3:     return n\l",shape=box];
node35 -> node36;
node36 [label="  4:     goto   0\l",shape=box];
node36 -> node46;
node37 [label="  5: 2_if_false:\l",shape=box];
node37 -> node38;
node38 [label="  6:     sub    t8 <- n, 1\l",shape=box];
node38 -> node39;
node39 [label="  7:     param  0 <- t8\l",shape=box];
node39 -> node40;
node40 [label="  8:     call   t9 <- fib\l",shape=box];
node40 -> node41;
node40 -> node32;
node41 [label="  9:     sub    t10 <- n, 2\l",shape=box];
node41 -> node42;
node42 [label=" 10:     param  0 <- t10\l",shape=box];
node42 -> node43;
node43 [label=" 11:     call   t11 <- fib\l",shape=box];
node43 -> node44;
node43 -> node32;
node44 [label=" 12:     add    t12 <- t9, t11\l",shape=box];
node44 -> node45;
node45 [label=" 13:     return t12\l",shape=box];
node45 -> node46;
node46 [label=" EXIT fib\r  14: 0:\l",shape=box];
node46 -> node22;
node46 -> node40;
node46 -> node43;
// scope 'ReadNumber'
node47 [label=" ENTER ReadNumber\r   0:     param  0 <- str\l",shape=box];
node47 -> node48;
node48 [label="  1:     call   WriteStr\l",shape=box];
node48 -> node49;
node49 [label="  2:     call   t8 <- ReadInt\l",shape=box];
node49 -> node49;
node51 [label=" EXIT ReadNumber\r   3:     return t8\l",shape=box];
node51 -> node7;
node51 -> node28;
}
